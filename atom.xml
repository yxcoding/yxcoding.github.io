<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yxdroid&#39;s blog</title>
  <subtitle>yxdroid&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yxcoding.github.io/"/>
  <updated>2016-09-27T12:12:22.000Z</updated>
  <id>http://yxcoding.github.io/</id>
  
  <author>
    <name>yxdroid</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WebView JS 注入</title>
    <link href="http://yxcoding.github.io/2016/09/27/1474977250400/"/>
    <id>http://yxcoding.github.io/2016/09/27/1474977250400/</id>
    <published>2016-09-27T11:54:10.000Z</published>
    <updated>2016-09-27T12:12:22.000Z</updated>
    
    <content type="html">&lt;p&gt;Native + H5 的开发已经成为APP 的主流形式。而往往有时候我们需要对WebView中的网页进行操作，有的可以使用Java 和 JS 互调的形式实现，今天我们来说说 通过向WebView 中的网页注入JS 的方式来操作网页。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;我们知道WebView中可以通过&lt;code&gt;webview.loadUrl(&amp;quot;javascript:xxx&amp;quot;);&lt;/code&gt;的方式来调用js里面的代码，那么，我们也可以利用&lt;code&gt;webview.loadUrl(&amp;quot;javascript:xxx&amp;quot;);&lt;/code&gt; 的方式来加载注入一段 js 代码 。我们 知道WebView 需要通过&lt;code&gt;webView.setWebViewClient(new MyWebClient());&lt;/code&gt;的方式来监听网页加载的各个周期方法回调，那么我们只需要在&lt;code&gt;onPageFinished(WebView view, String url)&lt;/code&gt; 中注入提前设置好的js 即可，例如:&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyWebClient&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WebViewClient&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public void onPageFinished(WebView view, String url)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            view.loadUrl(&lt;span class=&quot;string&quot;&gt;&quot;javascript:&quot;&lt;/span&gt; + js);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            view.loadUrl(&lt;span class=&quot;string&quot;&gt;&quot;javascript:&quot;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;setValue()&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onPageFinished(view, url);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;view.loadUrl(&amp;quot;javascript:&amp;quot; + js);&lt;/code&gt;来注入已经定义好的js 代码，接着&lt;code&gt;view.loadUrl(&amp;quot;javascript:&amp;quot; + &amp;quot;setValue()&amp;quot;);&lt;/code&gt;来调用注入js中的方法。&lt;/p&gt;
&lt;p&gt;完整代码如下&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AppCompatActivity&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private WebView webView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private String js;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected void onCreate(Bundle savedInstanceState)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setContentView(R.layout.activity_main);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        webView = (WebView) findViewById(R.id.webview);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        WebSettings webSettings = webView.getSettings();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        webSettings.setJavaScriptEnabled(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;regexp&quot;&gt;//web&lt;/span&gt;Settings.setDomStorageEnabled(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        webView.setWebViewClient(new MyWebClient());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        webView.loadUrl(&lt;span class=&quot;string&quot;&gt;&quot;file:///android_asset/test.html&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; 本地定义的JS，也可以通过读取URL 中的JS文件 赋值给 js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        js = &lt;span class=&quot;string&quot;&gt;&quot;javascript:function setValue()&amp;#123;x=document.getElementById(\&quot;content\&quot;);  x.innerHTML=\&quot;js 注入成功且方法调用成功\&quot;;&amp;#125;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyWebClient&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WebViewClient&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public void onPageFinished(WebView view, String url)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            view.loadUrl(&lt;span class=&quot;string&quot;&gt;&quot;javascript:&quot;&lt;/span&gt; + js);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            view.loadUrl(&lt;span class=&quot;string&quot;&gt;&quot;javascript:&quot;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;setValue()&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onPageFinished(view, url);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;本案例是加载本地的html，存放在&lt;code&gt;assets/test.html&lt;/code&gt;中&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;h1&amp;gt;WebView Js Injection Demo&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;p id=&quot;content&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    hello,yxcoding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该例子其实就是 通过向WebView注入一段 js，改变原来 id=”content” 的 p 标签下的内容 “hello,yxcoing” 为 “js 注入成功且方法调用成功”。效果图如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/yxcoding/WebViewJsInjection/blob/master/device-2016-07-25-100004.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们也可以调用远程的js，也就是通过url 地址的方式调用，例如&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String js = &lt;span class=&quot;string&quot;&gt;&quot;var appJs = document.createElement(\&quot;script\&quot;);&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;js += &lt;span class=&quot;string&quot;&gt;&quot;appJs.src=\&quot;http://www.yxcoding.net/xxx.js\&quot;;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;js += &lt;span class=&quot;string&quot;&gt;&quot;document.body.appendChild(appJs);&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;了解JS的同学知道，可以通过DOM操作，向html 添加&amp;lt;script&amp;gt;标签。 但是通过这种方式也许会出现一种问题，那就是 在加载远程的url js 文件的时候是需要时间，那么我们就不能在注入js后就马上调用js 中的方法，那么该怎么办呢？ 熟悉JS 的同学应该知道，有个 onLoad 事件，在页面加载完成的时候触发的事件，那就好办了&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;String js = &lt;span class=&quot;string&quot;&gt;&quot;var appJs = document.createElement(\&quot;script\&quot;);&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;js += &lt;span class=&quot;string&quot;&gt;&quot;appJs.src=\&quot;http://www.yxcoding.net/xxx.js\&quot;;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;js + = &lt;span class=&quot;string&quot;&gt;&quot;appJs.onload=function()&amp;#123;start();&amp;#125;;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;js += &lt;span class=&quot;string&quot;&gt;&quot;document.body.appendChild(appJs);&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在onload事件中 调用 start() 方法。 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;访问网络资源，不要忘记在AndroidManifest.xml 中添加 &amp;lt;uses-permission android:name=”android.permission.INTERNET”/&amp;gt;权限&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;全部代码请参考&lt;a href=&quot;https://github.com/yxcoding/WebViewJsInjection&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebViewJsInjection&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Native + H5 的开发已经成为APP 的主流形式。而往往有时候我们需要对WebView中的网页进行操作，有的可以使用Java 和 JS 互调的形式实现，今天我们来说说 通过向WebView 中的网页注入JS 的方式来操作网页。&lt;br&gt;
    
    </summary>
    
      <category term="开发总结" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="移动开发" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/Android/"/>
    
    
      <category term="android" scheme="http://yxcoding.github.io/tags/android/"/>
    
      <category term="webview" scheme="http://yxcoding.github.io/tags/webview/"/>
    
      <category term="js" scheme="http://yxcoding.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>自定义View原来是这么一回事！！！</title>
    <link href="http://yxcoding.github.io/2016/07/19/1468918916781/"/>
    <id>http://yxcoding.github.io/2016/07/19/1468918916781/</id>
    <published>2016-07-19T09:01:56.000Z</published>
    <updated>2016-07-20T09:23:18.000Z</updated>
    
    <content type="html">&lt;p&gt;虽然Android为我们提供了很多的控件，但是在很多情况下， 已经没法满足我们的独特需求，所以这个时候就需要我们根据原理自定义控件，从而解决问题。首先我们来了解下俩个基础概念:&lt;code&gt;View&lt;/code&gt; 和 &lt;code&gt;ViewGroup&lt;/code&gt;, 而自定义View 最直接的方式就是继承&lt;code&gt;View&lt;/code&gt;或者&lt;code&gt;ViewGroup&lt;/code&gt;。&lt;br&gt;&lt;code&gt;View&lt;/code&gt; 是针对单个视图的，它只有它自己，没有其他的视图。而&lt;code&gt;ViewGroup&lt;/code&gt;是个视图组合，它可以添加多个&lt;code&gt;View&lt;/code&gt;的子类或者多个&lt;code&gt;ViewGroup&lt;/code&gt;的子类。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;说到自定义View就不得不说&lt;code&gt;onMeasure(int widthMeasureSpec, int heightMeasureSpec)&lt;/code&gt;、&lt;br&gt;&lt;code&gt;onLayout(boolean changed, int left, int top, int right, int bottom)&lt;/code&gt; 和 &lt;code&gt;onDraw(Canvas canvas)&lt;/code&gt; 这三个方法。而他们的执行顺序为 &lt;code&gt;Measure-&amp;gt;Layout-&amp;gt;Draw&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;onMeasure-int-widthMeasureSpec-int-heightMeasureSpec&quot;&gt;&lt;a href=&quot;#onMeasure-int-widthMeasureSpec-int-heightMeasureSpec&quot; class=&quot;headerlink&quot; title=&quot;onMeasure(int widthMeasureSpec, int heightMeasureSpec)&quot;&gt;&lt;/a&gt;onMeasure(int widthMeasureSpec, int heightMeasureSpec)&lt;/h1&gt;&lt;p&gt;这个方法是用来测量的，很好理解，要想在手机上显示一个View，那必须要知道这个View的大小，而这个方法可以用来计算和设置View的大小。测量的时候需要知道两个值:&lt;code&gt;Mode&lt;/code&gt; 和 &lt;code&gt;Size&lt;/code&gt;。可通过&lt;code&gt;MeasureSpec.getMode(widthMeasureSpec)&lt;/code&gt; 和 &lt;code&gt;MeasureSpec.getSize(widthMeasureSpec)&lt;/code&gt; 获取。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Mode&lt;/code&gt; 的形式有三种 &lt;code&gt;MeasureSpec.EXACTLY（精确尺寸）&lt;/code&gt;、&lt;code&gt;MeasureSpec.AT_MOST（最大尺寸）&lt;/code&gt; &lt;code&gt;MeasureSpec.UNSPECIFIED（未指定尺寸）&lt;/code&gt;，第三种并不常见，一般指的是 AdapterView 类型的视图。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MeasureSpec.EXACTLY（精确尺寸）&lt;/code&gt;:  layout_width或layout_height 设置为match_parent 或者指定了具体值的时候如50dp&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MeasureSpec.AT_MOST（最大尺寸）&lt;/code&gt;: layout_width或layout_height指定为WRAP_CONTENT的时候，View的大小一般随着View的子View或内容进行变化，此时控件尺寸只要不超过父控件允许的最大尺寸即可。其实就是 size 不会超过 父控件的最大尺寸。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们来举个例子:&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int widthMode = MeasureSpec.getMode(widthMeasureSpec);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int widthSize = MeasureSpec.getSize(widthMeasureSpec);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int heightMode = MeasureSpec.getMode(heightMeasureSpec);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int heightSize = MeasureSpec.getSize(heightMeasureSpec);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int measuredHeight, measuredWidth;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (widthMode == MeasureSpec.EXACTLY)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            measuredWidth = widthSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            measuredWidth = &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (heightMode == MeasureSpec.EXACTLY)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            measuredHeight = heightSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            measuredHeight = &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setMeasuredDimension(measuredWidth, measuredHeight);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;xml 中&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&lt;span class=&quot;string&quot;&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;LinearLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;xmlns:&lt;/span&gt;android=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;android:&lt;/span&gt;layout_width=&lt;span class=&quot;string&quot;&gt;&quot;100dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;android:&lt;/span&gt;layout_height=&lt;span class=&quot;string&quot;&gt;&quot;100dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;android:&lt;/span&gt;gravity=&lt;span class=&quot;string&quot;&gt;&quot;center&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;android:&lt;/span&gt;background=&lt;span class=&quot;string&quot;&gt;&quot;@android:color/holo_red_dark&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;net.yxcoding.customview.CustomView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;symbol&quot;&gt;android:&lt;/span&gt;layout_width=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;symbol&quot;&gt;android:&lt;/span&gt;layout_height=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;symbol&quot;&gt;android:&lt;/span&gt;background=&lt;span class=&quot;string&quot;&gt;&quot;@android:color/holo_blue_bright&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果如下图所示:&lt;br&gt;&lt;img src=&quot;https://github.com/yxcoding/blog_images/blob/master/CustomView/QQ%E5%9B%BE%E7%89%8720160719173419.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如图所示 layout_width 为 match_parent，所以是 &lt;code&gt;MeasureSpec.EXACTLY&lt;/code&gt;,&lt;code&gt;measuredWidth = widthSize;&lt;/code&gt;最终的宽度就等于match_parent,也就是等于父类的100dp。而 layout_height 是 wrap_content，所以 Mode 是MeasureSpec.AT_MOST, &lt;code&gt;measuredHeight = 50&lt;/code&gt;,案例中的最终高度就等于50。&lt;/p&gt;
&lt;p&gt;它的测量流程如下图所示&lt;br&gt;&lt;img src=&quot;https://github.com/yxcoding/blog_images/blob/master/CustomView/abfdab0536252074b67bcc7c05a4be7d.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;onLayout-boolean-changed-int-left-int-top-int-right-int-bottom&quot;&gt;&lt;a href=&quot;#onLayout-boolean-changed-int-left-int-top-int-right-int-bottom&quot; class=&quot;headerlink&quot; title=&quot;onLayout(boolean changed, int left, int top, int right, int bottom)&quot;&gt;&lt;/a&gt;onLayout(boolean changed, int left, int top, int right, int bottom)&lt;/h1&gt;&lt;p&gt;这个方法 是针对 View 容器的，一般对于单纯的View 不需要重写该方法。 &lt;code&gt;onLayout&lt;/code&gt; 主要针对子View的显示位置，其中的left,top,right,bottom 分别表示显示父控件的举行可用空间（除去margin 和 paadding 的大小）。&lt;br&gt;可在该方法中获取所有子View，并且调用子View 的 &lt;code&gt;layout(int l, int t, int r, int b)&lt;/code&gt;来重新摆放位置。例如&lt;code&gt;layout(10,10,100,100)&lt;/code&gt;,则说明该View 在距离父控件的左上角位置&lt;code&gt;(10,10)&lt;/code&gt;的位置，显示的宽和高则为&lt;code&gt;(r-l, b-t)&lt;/code&gt;即&lt;code&gt;(90, 90)&lt;/code&gt;。下面我们举个例子，将子View 横向排列，之间间距为 20。&lt;/p&gt;
&lt;p&gt;首先将 CustomView 继承 ViewGroup，然后重写下面两个方法&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected void onLayout(boolean changed, int left, int top, int right, int bottom)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Log.d(&quot;onLayout&quot;, &quot;left=&quot; + left + &quot; top=&quot; + top + &quot; right=&quot; + right + &quot; bottom=&quot; + bottom);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for (int i = 0; i &amp;lt; getChildCount(); i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            View view = getChildAt(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            int measureWidth = view.getMeasuredWidth();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            int measureHeight = view.getMeasuredHeight();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            view.layout(left, top, left + measureWidth, measureHeight + top);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            left += measureWidth + 20;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int widthMode = MeasureSpec.getMode(widthMeasureSpec);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int widthSize = MeasureSpec.getSize(widthMeasureSpec);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int heightMode = MeasureSpec.getMode(heightMeasureSpec);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int heightSize = MeasureSpec.getSize(heightMeasureSpec);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        int measuredHeight = 0, measuredWidth = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (widthMode == MeasureSpec.EXACTLY || widthMode == MeasureSpec.AT_MOST)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            measuredWidth = widthSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (heightMode == MeasureSpec.EXACTLY || heightMode == MeasureSpec.AT_MOST)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            measuredHeight = heightSize;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 计算孩子View大小&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        measureChildren(widthMeasureSpec, heightMeasureSpec);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setMeasuredDimension(measuredWidth, measuredHeight);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;onMeasure&lt;/code&gt;通过&lt;code&gt;measureChildren(widthMeasureSpec, heightMeasureSpec)&lt;/code&gt; 计算子View 们的大小，在&lt;code&gt;onLayout&lt;/code&gt;中通过&lt;code&gt;getMeasuredWidth()&lt;/code&gt;和&lt;code&gt;getMeasuredHeight()&lt;/code&gt; 获取子View 的大小并且通过已知 left，top，right 和bottom 来重新设置子View的摆放位置。显示效果如下图所示&lt;br&gt;&lt;img src=&quot;https://github.com/yxcoding/blog_images/blob/master/CustomView/QQ%E5%9B%BE%E7%89%8720160720103312.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;onDraw-Canvas-canvas&quot;&gt;&lt;a href=&quot;#onDraw-Canvas-canvas&quot; class=&quot;headerlink&quot; title=&quot;onDraw(Canvas canvas)&quot;&gt;&lt;/a&gt;onDraw(Canvas canvas)&lt;/h1&gt;&lt;p&gt;下面我们来看看最有意思的方法，之所以说它有意思，是因为它可以画很多东西。它就是一个画布，你可以在它上面画出你想要的图案。然后说到&lt;code&gt;Canvas&lt;/code&gt; 画布就不得不说&lt;code&gt;Paint&lt;/code&gt;画笔了，要想画出东西，得用画笔才行，所以画布告诉系统要画什么，画笔就告诉系统怎么画，需要什么颜色、什么线条宽度等等。例如&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected void onDraw(Canvas canvas)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; 画圆&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        paint.setColor(Color.RED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; 线条宽度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        paint.setStrokeWidth(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        canvas.drawCircle(&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;, paint);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; 画矩形&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        paint.setColor(Color.BLUE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        canvas.drawRect(&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, getMeasuredWidth() - (&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;), getMeasuredHeight() / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, paint);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; 画线条&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        paint.setColor(Color.BLACK);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        paint.setStrokeWidth(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        canvas.drawLine(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, getMeasuredHeight() / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, getMeasuredWidth() / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, getMeasuredHeight() / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, paint);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; 画文字&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        paint.setColor(Color.YELLOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        paint.setTextSize(&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        canvas.drawText(&lt;span class=&quot;string&quot;&gt;&quot;hello,yxcoding&quot;&lt;/span&gt;, getMeasuredHeight() / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, getMeasuredHeight() - &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;, paint);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果如下图所示&lt;br&gt;&lt;img src=&quot;https://github.com/yxcoding/blog_images/blob/master/CustomView/QQ%E5%9B%BE%E7%89%8720160720110520.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;View刷新&quot;&gt;&lt;a href=&quot;#View刷新&quot; class=&quot;headerlink&quot; title=&quot;View刷新&quot;&gt;&lt;/a&gt;View刷新&lt;/h1&gt;&lt;p&gt;我们常常会去刷新View，从而实现特定的需求。比如 在一个自定义View中有一些动画，这个时候 就需要我们刷新View。那么改如何实现View 刷新呢。android为我们提供了三种刷新的方式 &lt;code&gt;requestLayout()&lt;/code&gt;、&lt;code&gt;invalidate()&lt;/code&gt;和&lt;code&gt;postInvalidate()&lt;/code&gt;。 &lt;code&gt;invalidate()&lt;/code&gt;和&lt;code&gt;postInvalidate()&lt;/code&gt;和是一样的，只不过&lt;code&gt;postInvalidate()&lt;/code&gt; 是在子线程中唤醒刷新操作，&lt;br&gt;它们俩 只会调用draw 即使 并没有什么变化。而 &lt;code&gt;requestLayout()&lt;/code&gt; 顾名思义，当布局发生变化的时候会调用measure和layout等和布局有关的操作。&lt;br&gt;所以总结一下就是，布局发生变化调用 &lt;code&gt;requestLayout()&lt;/code&gt;；当需要执行刷新动画的时候可以执行&lt;code&gt;postInvalidate()&lt;/code&gt;。 或&lt;code&gt;invalidate()&lt;/code&gt;从而唤醒&lt;code&gt;onDraw()&lt;/code&gt;中的代码。 根据上面的案例我们改造一下&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public void startAnimation()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        animator = ValueAnimator.ofFloat(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            public void onAnimationUpdate(ValueAnimator animation)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                scale = (float) animation.getAnimatedValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                postInvalidate();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; 重复执行动画&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        animator.setRepeatCount(-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; 重复模式为 从初始状态开始&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        animator.setRepeatMode(ValueAnimator.REVERSE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        animator.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected void onDraw(Canvas canvas)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; 画圆&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        paint.setColor(Color.RED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; 线条宽度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        paint.setStrokeWidth(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        canvas.drawCircle(&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt; * scale, paint);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; 画矩形&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        paint.setColor(Color.BLUE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        canvas.drawRect(&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, getMeasuredWidth() - (&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;) * scale, getMeasuredHeight() / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * scale, paint);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; 画线条&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        paint.setColor(Color.BLACK);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        paint.setStrokeWidth(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        canvas.drawLine(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, getMeasuredHeight() / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, getMeasuredWidth() / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * scale, getMeasuredHeight() / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, paint);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; 画文字&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        paint.setColor(Color.YELLOW);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        paint.setTextSize(&lt;span class=&quot;number&quot;&gt;40&lt;/span&gt; * scale);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        canvas.drawText(&lt;span class=&quot;string&quot;&gt;&quot;hello,yxcoding&quot;&lt;/span&gt;, getMeasuredHeight() / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, getMeasuredHeight() - &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;, paint);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为以上的动画是重复执行的，所以在动画的回调接口中会不断的调用&lt;code&gt;postInvalidate&lt;/code&gt;刷新View，而在onDraw()中通过每次计算的scale 来设置绘画的系数，从而达到以下图中的动画效果&lt;br&gt;&lt;img src=&quot;https://github.com/yxcoding/blog_images/blob/master/CustomView/ondrwa.gif?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;自定义属性&quot;&gt;&lt;a href=&quot;#自定义属性&quot; class=&quot;headerlink&quot; title=&quot;自定义属性&quot;&gt;&lt;/a&gt;自定义属性&lt;/h1&gt;&lt;p&gt;我们再写xml布局的时候，会有很多的属性值需要设置，如&lt;code&gt;android:layout_width=&amp;quot;match_parent&amp;quot;&lt;/code&gt;,我们会发现属性设置有三部分: 命名空间：属性名称 = 属性值，那么 我们也按照这种格式自定义属性。大致分为以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在res/values 下定义attrs.xml 文件，如下所示：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;declare-styleable name=&quot;CustomView&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;attr name=&quot;circleColor&quot; format=&quot;color&quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;attr name=&quot;rectColor&quot; format=&quot;color&quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;attr name=&quot;lineColor&quot; format=&quot;color&quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;attr name=&quot;textColor&quot; format=&quot;color&quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;attr name=&quot;circleRadius&quot; format=&quot;dimension&quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/declare-styleable&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;CustomView是我们在代码中获取该属性集合的凭证，format 代表的是该属性的 值类型，例如color 代表是颜色值，dimension 代表了尺寸长度值等等。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在xml 布局中定义命名空间和使用&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&lt;span class=&quot;string&quot;&gt;&quot;1.0&quot;&lt;/span&gt; encoding=&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!--定义命名空间， 在gradle中不用使用包名后缀，使用 /res-auto--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;LinearLayout&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;xmlns:&lt;/span&gt;android=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;xmlns:&lt;/span&gt;custom=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res-auto&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;android:&lt;/span&gt;layout_width=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;android:&lt;/span&gt;layout_height=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;net.yxcoding.customview.CustomView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;symbol&quot;&gt;android:&lt;/span&gt;layout_width=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;symbol&quot;&gt;android:&lt;/span&gt;layout_height=&lt;span class=&quot;string&quot;&gt;&quot;200dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;symbol&quot;&gt;android:&lt;/span&gt;layout_margin=&lt;span class=&quot;string&quot;&gt;&quot;10dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;symbol&quot;&gt;android:&lt;/span&gt;background=&lt;span class=&quot;string&quot;&gt;&quot;@android:color/holo_blue_bright&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;symbol&quot;&gt;custom:&lt;/span&gt;circleColor=&lt;span class=&quot;string&quot;&gt;&quot;#ff0000&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;symbol&quot;&gt;custom:&lt;/span&gt;circleRadius=&lt;span class=&quot;string&quot;&gt;&quot;40dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;symbol&quot;&gt;custom:&lt;/span&gt;lineColor=&lt;span class=&quot;string&quot;&gt;&quot;#0000ff&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;symbol&quot;&gt;custom:&lt;/span&gt;rectColor=&lt;span class=&quot;string&quot;&gt;&quot;#00ff00&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;symbol&quot;&gt;custom:&lt;/span&gt;textColor=&lt;span class=&quot;string&quot;&gt;&quot;#ffffff&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/LinearLayout&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;然后在代码中 就可以这样获取我们自定义的属性值了&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public CustomView(Context context, AttributeSet attrs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(context, attrs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CustomView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        circleColor = a.getColor(R.styleable.CustomView_circleColor, &lt;span class=&quot;number&quot;&gt;0x000000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rectColor = a.getColor(R.styleable.CustomView_rectColor, &lt;span class=&quot;number&quot;&gt;0x000000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lineColor = a.getColor(R.styleable.CustomView_lineColor, &lt;span class=&quot;number&quot;&gt;0x000000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        textColor = a.getColor(R.styleable.CustomView_textColor, &lt;span class=&quot;number&quot;&gt;0x000000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        circleRadius = a.getDimension(R.styleable.CustomView_circleRadius, &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        a.recycle();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        init(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过对应的属性值格式 来获取相应的属性值，例如 颜色值 就是&lt;code&gt;getColor()&lt;/code&gt;, 尺寸大小就是&lt;code&gt;getDimension()&lt;/code&gt;。最后通过调用&lt;code&gt;a.recycle()&lt;/code&gt; 来释放回收资源。获取到自定义属性值后，就可以在&lt;code&gt;onDraw&lt;/code&gt; 中 设置了。效果如下图所示&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yxcoding/blog_images/master/CustomView/QQ%E5%9B%BE%E7%89%8720160720160338.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;以上阐述了一些 常用的自定义View 的方式，通过继承和重写相应的方法来重构View。还有一种方式就是通过 LayoutInflater 从已知xml布局文件中 获取定义布局View。另外，在自定义View过程中，会处理一些事件处理onTouchEvent，具体的可参考 &lt;a href=&quot;http://blog.csdn.net/bigconvience/article/details/26456359&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android的Touch系统简介（一） &lt;/a&gt; 和 &lt;a href=&quot;&quot;&gt;Android Touch系统简介（二）:实例详解onInterceptTouchEvent与onTouchEvent的调用过程 &lt;/a&gt; 两篇文章。&lt;/p&gt;
&lt;p&gt;学会自定义View 能够帮助我们更加深入的了解android页面View 的原理，同时同事能够为我们带来无限的可能。大家加油！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;虽然Android为我们提供了很多的控件，但是在很多情况下， 已经没法满足我们的独特需求，所以这个时候就需要我们根据原理自定义控件，从而解决问题。首先我们来了解下俩个基础概念:&lt;code&gt;View&lt;/code&gt; 和 &lt;code&gt;ViewGroup&lt;/code&gt;, 而自定义View 最直接的方式就是继承&lt;code&gt;View&lt;/code&gt;或者&lt;code&gt;ViewGroup&lt;/code&gt;。&lt;br&gt;&lt;code&gt;View&lt;/code&gt; 是针对单个视图的，它只有它自己，没有其他的视图。而&lt;code&gt;ViewGroup&lt;/code&gt;是个视图组合，它可以添加多个&lt;code&gt;View&lt;/code&gt;的子类或者多个&lt;code&gt;ViewGroup&lt;/code&gt;的子类。&lt;br&gt;
    
    </summary>
    
      <category term="开发总结" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="移动开发" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/Android/"/>
    
    
      <category term="android" scheme="http://yxcoding.github.io/tags/android/"/>
    
      <category term="自定义View" scheme="http://yxcoding.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
  </entry>
  
  <entry>
    <title>gradle-experimental 构建NDK 项目</title>
    <link href="http://yxcoding.github.io/2016/07/14/1468488502586/"/>
    <id>http://yxcoding.github.io/2016/07/14/1468488502586/</id>
    <published>2016-07-14T09:28:22.000Z</published>
    <updated>2016-07-15T03:55:02.000Z</updated>
    
    <content type="html">&lt;p&gt;记得刚从Eclipse 转向Android Studio 进行开发的时候，对于搭建NDK 开发环境让人头疼。网上关于AS NDK 开发环境搭建的资料不是很全面，后来经过慢慢的摸索，最终把之前的项目跑起来了。后来，随着AS版本不断的升级，AS 对NDK开发的功能越来越强大，在经历不用命令行生成C/C++ 文件后（通过Setting-&amp;gt;Tools-&amp;gt;External Tools添加&lt;code&gt;javah&lt;/code&gt;、&lt;code&gt;ndk-build&lt;/code&gt;和&lt;code&gt;ndk-build clean&lt;/code&gt; 命令,然后只需在带&lt;code&gt;native&lt;/code&gt;方法的类上右击-&amp;gt;External Tools 选择快捷命令即可，如图1），后来又发现&lt;code&gt;Gradle&lt;/code&gt; 的一个插件 &lt;code&gt;gradle-experimental&lt;/code&gt;，能够让我们快捷方便更加不用配置&lt;code&gt;Application.mk&lt;/code&gt;和&lt;code&gt;Android.mk&lt;/code&gt;，而且对C/C++的支持更加强大，再也没有报红了！&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yxcoding/NDKDemo/master/pic1.png&quot; alt=&quot;&quot;&gt;图1&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Android Studio 版本最好升级到最新版&lt;br&gt;Gradle版本&amp;gt;2.1.0&lt;br&gt;新建一个android 工程 NDKDemo 如图2所示&lt;br&gt;在项目中的local.properties 添加 NDK 环境路径  ndk.dir=你的ndk路径&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yxcoding/NDKDemo/master/pic2.png&quot; alt=&quot;&quot;&gt;图2&lt;/p&gt;
&lt;h1 id=&quot;创建NDK-Model-支持&quot;&gt;&lt;a href=&quot;#创建NDK-Model-支持&quot; class=&quot;headerlink&quot; title=&quot;创建NDK Model 支持&quot;&gt;&lt;/a&gt;创建NDK Model 支持&lt;/h1&gt;&lt;p&gt;在含有NDK编程的项目中，本人习惯创建NDK 模块，将关于&lt;code&gt;jni&lt;/code&gt;的配置和代码放在NDK模块中，例如图2中的&lt;code&gt;NDKUtil&lt;/code&gt; 模块，然后将&lt;code&gt;NDKUtil&lt;/code&gt;引入&lt;code&gt;app&lt;/code&gt; 中。在&lt;code&gt;NDKUtil&lt;/code&gt;模块上&lt;code&gt;右击-&amp;gt;New-&amp;gt;Folder-&amp;gt;JNIFolder&lt;/code&gt; 创建jni 目录。&lt;/p&gt;
&lt;h1 id=&quot;修改build-gradle-配置&quot;&gt;&lt;a href=&quot;#修改build-gradle-配置&quot; class=&quot;headerlink&quot; title=&quot;修改build.gradle 配置&quot;&gt;&lt;/a&gt;修改build.gradle 配置&lt;/h1&gt;&lt;p&gt;因为我们使用了&lt;code&gt;gradle-experimental&lt;/code&gt;(&lt;a href=&quot;http://mvnrepository.com/artifact/com.android.tools.build/gradle-experimental&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;查看gradle-experimental版本更新&lt;/a&gt;)来构建NDK， 所以，我们首先要添加 该插件的依赖，并且修改相关配置选项。&lt;code&gt;NDKUtil&lt;/code&gt;中&lt;code&gt;build.gradle&lt;/code&gt;修改为一下形式&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 注意这里 要将原来的com.android.library 改成 com.android.model.library&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;apply plugin: &#39;com.android.model.library&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;model &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    android &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        compileSdkVersion 23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        buildToolsVersion &quot;23.0.3&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        defaultConfig &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 注意 要添加.apiLevel ,否则会报错&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            minSdkVersion.apiLevel 14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            targetSdkVersion.apiLevel 23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        buildTypes &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            release &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                minifyEnabled false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                // 修改成add 的形式 添加混淆文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proguardFiles.add(file(&#39;proguard-rules.pro&#39;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ndk &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 模块名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            moduleName &quot;ndkLib&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            abiFilters.addAll([&#39;armeabi&#39;, &#39;armeabi-v7a&#39;,&#39;x86&#39;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ldLibs.addAll([&#39;log&#39;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;buildscript &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        jcenter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 添加 gradle-experimental 依赖&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        classpath &#39;com.android.tools.build:gradle-experimental:0.7.2&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dependencies &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    testCompile &#39;junit:junit:4.12&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    compile &#39;com.android.support:appcompat-v7:23.3.0&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;生成jni-文件&quot;&gt;&lt;a href=&quot;#生成jni-文件&quot; class=&quot;headerlink&quot; title=&quot;生成jni 文件&quot;&gt;&lt;/a&gt;生成jni 文件&lt;/h1&gt;&lt;p&gt;在配置以上参数和选项后，接着在java 中创建&lt;code&gt;native&lt;/code&gt; 方法类，并且载入ndk 模块，如下图所示&lt;br&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yxcoding/NDKDemo/master/pic3.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;我们会发现&lt;code&gt;native&lt;/code&gt;方法会报红，如图所示按&lt;code&gt;Alt + Enter&lt;/code&gt;，选择第一项 即可在&lt;code&gt;jni&lt;/code&gt;中自动创建&lt;code&gt;ndkLib.c&lt;/code&gt;文件， 对的，&lt;code&gt;.h&lt;/code&gt;头文件 没了…&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#include &amp;lt;jni.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#include &amp;lt;android/log.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#define  LOG_TAG &quot;NDKUtil&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#define  LOGD(...) __android_log_print(ANDROID_LOG_DEBUG,LOG_TAG,__VA_ARGS__)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JNIEXPORT jstring JNICALL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Java_net_yxcoding_ndkutil_NDKUtil_getString(JNIEnv *env, jclass type) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; TODO&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    LOGD(&lt;span class=&quot;string&quot;&gt;&quot;执行&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (*env)-&amp;gt;NewStringUTF(env, &lt;span class=&quot;string&quot;&gt;&quot;Hello, yxcoding&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在编写好C/C++ 程序后，直接&lt;code&gt;Rebuild Project&lt;/code&gt; 即可在下图所指目录下生成so 文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yxcoding/NDKDemo/master/pic4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;jni-调用&quot;&gt;&lt;a href=&quot;#jni-调用&quot; class=&quot;headerlink&quot; title=&quot;jni 调用&quot;&gt;&lt;/a&gt;jni 调用&lt;/h1&gt;&lt;p&gt;那么在&lt;code&gt;app&lt;/code&gt;模块中直接调用该方法&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AppCompatActivity&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected void onCreate(Bundle savedInstanceState)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setContentView(R.layout.activity_main);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TextView tvName = (TextView) findViewById(R.id.tvName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tvName.setText(NDKUtil.getString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;详细代码请见 &lt;a href=&quot;!https://github.com/yxcoding/NDKDemo&quot;&gt;NDKDemo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yxcoding/NDKDemo/master/pic5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;记得刚从Eclipse 转向Android Studio 进行开发的时候，对于搭建NDK 开发环境让人头疼。网上关于AS NDK 开发环境搭建的资料不是很全面，后来经过慢慢的摸索，最终把之前的项目跑起来了。后来，随着AS版本不断的升级，AS 对NDK开发的功能越来越强大，在经历不用命令行生成C/C++ 文件后（通过Setting-&amp;gt;Tools-&amp;gt;External Tools添加&lt;code&gt;javah&lt;/code&gt;、&lt;code&gt;ndk-build&lt;/code&gt;和&lt;code&gt;ndk-build clean&lt;/code&gt; 命令,然后只需在带&lt;code&gt;native&lt;/code&gt;方法的类上右击-&amp;gt;External Tools 选择快捷命令即可，如图1），后来又发现&lt;code&gt;Gradle&lt;/code&gt; 的一个插件 &lt;code&gt;gradle-experimental&lt;/code&gt;，能够让我们快捷方便更加不用配置&lt;code&gt;Application.mk&lt;/code&gt;和&lt;code&gt;Android.mk&lt;/code&gt;，而且对C/C++的支持更加强大，再也没有报红了！&lt;/p&gt;
    
    </summary>
    
      <category term="开发总结" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="移动开发" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/Android/"/>
    
    
      <category term="android studio" scheme="http://yxcoding.github.io/tags/android-studio/"/>
    
      <category term="ndk" scheme="http://yxcoding.github.io/tags/ndk/"/>
    
      <category term="gradle" scheme="http://yxcoding.github.io/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>ViewPager + Fragment 最优懒加载</title>
    <link href="http://yxcoding.github.io/2016/07/13/1468374159777/"/>
    <id>http://yxcoding.github.io/2016/07/13/1468374159777/</id>
    <published>2016-07-13T01:42:39.000Z</published>
    <updated>2016-07-13T06:44:06.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;code&gt;ViewPager&lt;/code&gt; + &lt;code&gt;Fragment&lt;/code&gt; 已经成为现在主流的APP 界面搭建方式， 例如我们最常见的微信，主界面就是使用了&lt;code&gt;ViewPager&lt;/code&gt; + &lt;code&gt;Fragment&lt;/code&gt;，通过&lt;code&gt;ViewPager&lt;/code&gt;来创建和管理四个子页面&lt;code&gt;Fragment&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;但是，这种方式有一种缺点让人头疼， 那就是 &lt;code&gt;Fragment预加载&lt;/code&gt;。也就是说 当加载第1个fragment 的时候 会自动加载第二个fragment，加载第二个fragment的时候会自动加载第三个fragment，以此类推…但是实际情况我们希望的是当选择哪个页面的时候再去加载数据资源。那么我们该怎么做呢？&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;我们可以使用一种方式来避免预加载的时候去加载数据，只去初始化UI，这样就提出了 “懒加载” 的算法。我们可以在&lt;code&gt;Fragment&lt;/code&gt;的生命周期中 来控制成员变量从而判断加载数据的时机。下面我们就来看看代码的实现。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为了更好的展示ViewPager + Fragment 显示的效果，我们使用TabLayout 这个控件来实现：&lt;br&gt;添加TabLayout 引用库&lt;br&gt;compile ‘com.android.support:design:23.+’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先来创建一个懒加载的父类&lt;code&gt;LazyFragment&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * User: yxfang&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Date: 2016-07-13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Time: 10:02&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * ------------- Description -------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * 定义懒加载Fragment 基类，用来实现懒加载算法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * ---------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public abstract class LazyFragment extends BaseFragment&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 当前Fragment 是否可见&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected boolean isVisible = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 是否加载过数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected boolean isLoadData = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void setUserVisibleHint(boolean isVisibleToUser)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.setUserVisibleHint(isVisibleToUser);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.isVisible = isVisibleToUser;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        preLoadData(false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void onActivityCreated(@Nullable Bundle savedInstanceState)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super.onActivityCreated(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       	this.isViewInit = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 防止一开始加载的时候未 调用 preLoadData 方法， 因为setUserVisibleHint 比 onActivityCreated 触发 前&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (getUserVisibleHint())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            preLoadData(false);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 子类加载数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    protected abstract void loadData();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 当UI初始化成功，UI可见并且没有加载过数据的时候 加载数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * @param forceLoad 强制加载数据&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void preLoadData(boolean forceLoad)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (isViewInit &amp;amp;&amp;amp; isVisible &amp;amp;&amp;amp; (!isLoadData || forceLoad))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            loadData();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            isLoadData = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代码中的&lt;code&gt;isViewInit&lt;/code&gt; &lt;code&gt;isVisible&lt;/code&gt; &lt;code&gt;isLoadData&lt;/code&gt;就是用来控制懒加载的。每当预先加载Fragment的时候，只会去加载UI而并不会加载数据资源，只有当当前Fragment 可见并且之前没有加载过的时候才会去加载数据。通过实现父类&lt;code&gt;LazyFragment&lt;/code&gt;的抽象方法&lt;code&gt;loadData()&lt;/code&gt;来执行网络数据的加载。&lt;a href=&quot;https://github.com/yxcoding/ViewPager-LazyFragment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;详细代码&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/yxcoding/ViewPager-LazyFragment/blob/master/Screenshot_2016-07-13-14-38-19.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;ViewPager&lt;/code&gt; + &lt;code&gt;Fragment&lt;/code&gt; 已经成为现在主流的APP 界面搭建方式， 例如我们最常见的微信，主界面就是使用了&lt;code&gt;ViewPager&lt;/code&gt; + &lt;code&gt;Fragment&lt;/code&gt;，通过&lt;code&gt;ViewPager&lt;/code&gt;来创建和管理四个子页面&lt;code&gt;Fragment&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;但是，这种方式有一种缺点让人头疼， 那就是 &lt;code&gt;Fragment预加载&lt;/code&gt;。也就是说 当加载第1个fragment 的时候 会自动加载第二个fragment，加载第二个fragment的时候会自动加载第三个fragment，以此类推…但是实际情况我们希望的是当选择哪个页面的时候再去加载数据资源。那么我们该怎么做呢？&lt;br&gt;
    
    </summary>
    
      <category term="开发总结" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="移动开发" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/Android/"/>
    
    
      <category term="android" scheme="http://yxcoding.github.io/tags/android/"/>
    
      <category term="ViewPager" scheme="http://yxcoding.github.io/tags/ViewPager/"/>
    
      <category term="Fragment" scheme="http://yxcoding.github.io/tags/Fragment/"/>
    
  </entry>
  
  <entry>
    <title>RxJava+Retrofit 构建网络请求处理方式</title>
    <link href="http://yxcoding.github.io/2016/07/08/1467969481356/"/>
    <id>http://yxcoding.github.io/2016/07/08/1467969481356/</id>
    <published>2016-07-08T09:18:01.000Z</published>
    <updated>2016-07-12T06:27:06.000Z</updated>
    
    <content type="html">&lt;p&gt;大概在几个月之前， 在CSDN上看见了RxJava这样的一个 新名词，但是也没有太注意，所以也就没去看它。但是过了一段时间，发现网上很多关于RxJava的博客和总结，Github上面的一些开源项目也都用到了RxJava，所以就决定开始研究这个神秘而又新颖的东西。起初看RxJava 很难理解，后来慢慢的也就理解了。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;RxJava&quot;&gt;&lt;a href=&quot;#RxJava&quot; class=&quot;headerlink&quot; title=&quot;RxJava&quot;&gt;&lt;/a&gt;RxJava&lt;/h1&gt;&lt;p&gt;首先，RxJava是个什么鬼？&lt;br&gt;“a library for composing asynchronous and event-based programs using observable sequences for the Java VM”，翻译一下就是“一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库”，总结一下RxJava 就是一个可异步处理基于序列事件的开源库。卧槽，看到这，是不是脑子里浮想翩翩呀？哈哈&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过Android Studio中引入RxJava RxAndroid 和Retrofit 开发库，在app模块中的build.gradle 中复制以下代码&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;compile &lt;span class=&quot;string&quot;&gt;&#39;io.reactivex:rxandroid:1.2.1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;compile &lt;span class=&quot;string&quot;&gt;&#39;io.reactivex:rxjava:1.1.6&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;compile &lt;span class=&quot;string&quot;&gt;&#39;com.squareup.retrofit2:retrofit:2.1.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;compile &lt;span class=&quot;string&quot;&gt;&#39;com.squareup.retrofit2:adapter-rxjava:2.1.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先来一丢RxJava的代码，看看它的代码风格&lt;br&gt;  &lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 创建被观察者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Observable.create(new Observable.OnSubscribe&amp;lt;String&amp;gt;()  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            public void call(Subscriber&amp;lt;? super String&amp;gt; subscriber)  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           		// 通知观察者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                subscriber.onNext(&quot;Hello&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                subscriber.onNext(&quot;yxcoding&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                subscriber.onCompleted();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 注册观察者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;).subscribe(new Subscriber&amp;lt;String&amp;gt;()	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            public void onCompleted()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Log.d(&quot;Subscriber&quot;, &quot;onCompleted&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            public void onError(Throwable e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Log.e(&quot;Subscriber&quot;, &quot;onError&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            public void onNext(String s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            	// 接收到通知，处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Log.d(&quot;Subscriber&quot;, &quot;onNext = &quot; + s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;代码逻辑清晰简洁。&lt;/p&gt;
&lt;h2 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink&quot; title=&quot;观察者模式&quot;&gt;&lt;/a&gt;观察者模式&lt;/h2&gt;&lt;p&gt;A 对 B 进行观察监听， A 是观察者， B就是被观察者。当B状态有改变时，就会通知它的观察者，这样 A 就会进行相应的操作，这就是我们所说的 观察者模式。RxJava 的观察者模式又是怎么样的呢？&lt;/p&gt;
&lt;p&gt;首先我们来了解下RxJava 中的几个基本概念：&lt;code&gt;Observable&lt;/code&gt;(可观察者，即被观察者)、 &lt;code&gt;Observer&lt;/code&gt; (观察者)、 &lt;code&gt;subscribe&lt;/code&gt; (订阅)、事件。&lt;code&gt;Observable&lt;/code&gt;和 &lt;code&gt;Observer\ Subscriber&lt;/code&gt;通过 &lt;code&gt;subscribe()&lt;/code&gt; 方法实现订阅关系，从而 &lt;code&gt;Observable&lt;/code&gt;可以在需要的时候发出事件来通知 &lt;code&gt;Observer&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Observer&lt;/code&gt;和 &lt;code&gt;Subscriber&lt;/code&gt;都是作为被观察者， 提供了相应的回调方法。&lt;code&gt;Subscriber&lt;/code&gt;是对&lt;code&gt;Observer&lt;/code&gt; 进行了扩展， 两者使用方法一样。&lt;code&gt;Subscriber&lt;/code&gt;增加了&lt;code&gt;onStart()&lt;/code&gt;回调方法，值得注意的是 &lt;code&gt;onStart()&lt;/code&gt; 是在&lt;code&gt;subscribe()&lt;/code&gt;  触发的线程中被调用， 不能指定线程。如果要想在指定线程中使用，可以使用&lt;code&gt;doOnSubscribe()&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;创建被观察者&quot;&gt;&lt;a href=&quot;#创建被观察者&quot; class=&quot;headerlink&quot; title=&quot;创建被观察者&quot;&gt;&lt;/a&gt;创建被观察者&lt;/h3&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observable observable = Observable.create(new Observable.OnSubscribe&amp;lt;String&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            public void call(Subscriber&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; String&amp;gt; subscriber)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                subscriber.onNext(&lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                subscriber.onNext(&lt;span class=&quot;string&quot;&gt;&quot;yxcoding&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                subscriber.onCompleted();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了通过&lt;code&gt;create()&lt;/code&gt;创建之外， RxJava 还提供了两种快捷方式&lt;br&gt;&lt;code&gt;&amp;lt;T&amp;gt; Observable&amp;lt;T&amp;gt; just(T t1,.......)&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observable observable = Observable.just(&lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;yxcoding&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;依次传入参数。&lt;br&gt;还可通过数组形式传入&lt;br&gt;&lt;code&gt;&amp;lt;T&amp;gt; Observable&amp;lt;T&amp;gt; from(T[] array)&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observable observable = Observable.from(new String[]&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;yxcoding&quot;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;创建观察-订阅者&quot;&gt;&lt;a href=&quot;#创建观察-订阅者&quot; class=&quot;headerlink&quot; title=&quot;创建观察/订阅者&quot;&gt;&lt;/a&gt;创建观察/订阅者&lt;/h3&gt;&lt;p&gt;被观察者创建好之后，需要创建观察者进行注册监听&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Subscriber subscriber = new Subscriber&amp;lt;String&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void onCompleted()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Log.d(&lt;span class=&quot;string&quot;&gt;&quot;Subscriber&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;onCompleted&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void onError(Throwable e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Log.e(&lt;span class=&quot;string&quot;&gt;&quot;Subscriber&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;onError&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void onNext(String s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Log.d(&lt;span class=&quot;string&quot;&gt;&quot;Subscriber&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;onNext = &quot;&lt;/span&gt; + s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;观察者的三个回调方法中，&lt;code&gt;onNext()&lt;/code&gt; 会被调用多次，&lt;code&gt;onCompleted()&lt;/code&gt; 和&lt;code&gt;onError(Throwable)&lt;/code&gt; 只会被调用一次且两者之间只会调用一个。   &lt;/p&gt;
&lt;h3 id=&quot;观察者-订阅-被观察者&quot;&gt;&lt;a href=&quot;#观察者-订阅-被观察者&quot; class=&quot;headerlink&quot; title=&quot;观察者 订阅 被观察者&quot;&gt;&lt;/a&gt;观察者 订阅 被观察者&lt;/h3&gt;&lt;p&gt;当观察者与被观察者 创建好之后，通过&lt;code&gt;observable.subscribe(subscriber)&lt;/code&gt;建立订阅关系， 一旦调用&lt;code&gt;observable.subscribe(subscriber)&lt;/code&gt;，就会触发 被观察者Obserable中的&lt;code&gt;call()&lt;/code&gt;方法进行事件发送。&lt;br&gt;&lt;code&gt;subscriber.onNext(&amp;quot;Hello&amp;quot;);&lt;/code&gt; 发送事件通知到subscriber中的&lt;code&gt;onNext(T t)&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;除了通过&lt;code&gt;observable.subscribe(subscriber/observer)&lt;/code&gt;建立订阅关系外， RxJava 还提供了不完整定义的回调， RxJava 会自动根据自己定义的创建出Subsriber，例如&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observable.just(&lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;yxcoding&quot;&lt;/span&gt;).subscribe(new Action1&amp;lt;String&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  public void call(String s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	 Log.d(&lt;span class=&quot;string&quot;&gt;&quot;Subscriber&quot;&lt;/span&gt;, s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用案例&quot;&gt;&lt;a href=&quot;#使用案例&quot; class=&quot;headerlink&quot; title=&quot;使用案例&quot;&gt;&lt;/a&gt;使用案例&lt;/h3&gt;&lt;p&gt;将传入的数字数组依次的打印出来&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observable.just(new String[] &amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;yxcoding&quot;&lt;/span&gt;&amp;#125;).subscribe(new Action1&amp;lt;String&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  public void call(String s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	 Log.d(&lt;span class=&quot;string&quot;&gt;&quot;Subscriber&quot;&lt;/span&gt;, s);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;事件序列对象加工处理（变换）&quot;&gt;&lt;a href=&quot;#事件序列对象加工处理（变换）&quot; class=&quot;headerlink&quot; title=&quot;事件序列对象加工处理（变换）&quot;&gt;&lt;/a&gt;事件序列对象加工处理（变换）&lt;/h2&gt;&lt;p&gt;以上说到都是最基本的观察者模式交互，即使不适用RxJava，也能用其他的方式实现。在日常开发中我们会碰到这样的情况，在返回的对象中，我们需要对对象进行加工处理，然后再返回。&lt;/p&gt;
&lt;h3 id=&quot;map&quot;&gt;&lt;a href=&quot;#map&quot; class=&quot;headerlink&quot; title=&quot;map()&quot;&gt;&lt;/a&gt;map()&lt;/h3&gt;&lt;p&gt;例如下面的例子：&lt;br&gt;当我们传入一张图片的 字符串地址的时候&lt;code&gt;yxcoding/image/logo.png&lt;/code&gt;, 一般的做法是 将 它转化为&lt;code&gt;bitmap&lt;/code&gt;然后再显示，而在RxJava 中，只需要通过&lt;code&gt;map()&lt;/code&gt;来将序列事件中的对象值进行加工即可&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Observable.just(&lt;span class=&quot;string&quot;&gt;&quot;yxcoding/image/logo.png&quot;&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .map(new Func1&amp;lt;String, Bitmap&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     	&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; 参数类型 String&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public Bitmap call(String path) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; 返回类型 Bitmap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; getBitmapFromPath(filePath); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .subscribe(new Action1&amp;lt;Bitmap&amp;gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public void call(Bitmap bitmap) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	 &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; 参数类型 Bitmap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            imageview.setImageBitmap(bitmap);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;那么，也许你会问，&lt;code&gt;Func1&lt;/code&gt; 是个什么鬼？ 怎么不用&lt;code&gt;Action1&lt;/code&gt;了？ 细心的话，你会发现&lt;code&gt;Func1&lt;/code&gt;中&lt;code&gt;call()&lt;/code&gt;是有返回值的，而&lt;code&gt;Action1&lt;/code&gt;中没有，其他的用法都一样。&lt;/p&gt;
&lt;h3 id=&quot;flatMap&quot;&gt;&lt;a href=&quot;#flatMap&quot; class=&quot;headerlink&quot; title=&quot;flatMap()&quot;&gt;&lt;/a&gt;flatMap()&lt;/h3&gt;&lt;p&gt;&lt;code&gt;flatMap()&lt;/code&gt;相对于&lt;code&gt;map()&lt;/code&gt;来说稍微要复杂一点， 但它们的作用都是对序列事件中的对象 进行加工处理然后再返回。但是&lt;code&gt;flatMap()&lt;/code&gt;返回的是&lt;code&gt;Observable&lt;/code&gt;,&lt;code&gt;flatMap()&lt;/code&gt;将发送的时间都集合在同一个&lt;code&gt;Observable&lt;/code&gt;, 然后在统一交给&lt;code&gt;Subscriber \observer&lt;/code&gt;。程序员还是看代码吧，废话真多&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例子：传入用户列表，输出用户的收藏列表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;Collect&amp;gt; collectList = new ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;collectList.add(new Collect(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;collect1&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;collectList.add(new Collect(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;collect2&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;collectList.add(new Collect(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;collect&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;User&amp;gt; userList = new ArrayList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;userList.add(new User(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;user1&quot;&lt;/span&gt;, collectList));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;userList.add(new User(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;user2&quot;&lt;/span&gt;, collectList));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;userList.add(new User(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;user3&quot;&lt;/span&gt;, collectList));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Observable.from(userList).flatMap(new Func1&amp;lt;User, Observable&amp;lt;Collect&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public Observable&amp;lt;Collect&amp;gt; call(User student)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; 通过from 方式创建Observable 返回&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Observable.from(student.getCollectList());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).subscribe(new Subscriber&amp;lt;Collect&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void onCompleted()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void onError(Throwable e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void onNext(Collect collect)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Log.d(&lt;span class=&quot;string&quot;&gt;&quot;Subscriber&quot;&lt;/span&gt;, collect.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Scheduler-线程控制&quot;&gt;&lt;a href=&quot;#Scheduler-线程控制&quot; class=&quot;headerlink&quot; title=&quot;Scheduler  线程控制&quot;&gt;&lt;/a&gt;Scheduler  线程控制&lt;/h2&gt;&lt;p&gt;前面提到，RxJava是线程不变的， 在那个线程调用&lt;code&gt;subscribe()&lt;/code&gt;，就在哪个发送事件和处理事件，要想控制线程，就需要使用到&lt;code&gt;Scheduler&lt;/code&gt;调度器。&lt;code&gt;Scheduler&lt;/code&gt;提供一下集中类型的线程使用场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Schedulers.immediate()&lt;/code&gt;: 直接在当前线程运行，相当于不指定线程。这是默认的 &lt;code&gt;Scheduler&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Schedulers.newThread()&lt;/code&gt;: 总是启用新线程，并在新线程执行操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Schedulers.io()&lt;/code&gt;: I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 &lt;code&gt;Scheduler&lt;/code&gt;。行为模式和 &lt;code&gt;newThread()&lt;/code&gt; 差不多，区别在于 &lt;code&gt;io()&lt;/code&gt; 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 &lt;code&gt;io()&lt;/code&gt; 比 &lt;code&gt;newThread()&lt;/code&gt;更有效率。不要把计算工作放在&lt;code&gt;io()&lt;/code&gt;中，可以避免创建不必要的线程。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Schedulers.computation()&lt;/code&gt;: 计算所使用的 &lt;code&gt;Scheduler&lt;/code&gt;。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 &lt;code&gt;Scheduler&lt;/code&gt; 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 &lt;code&gt;computation()&lt;/code&gt; 中，否则 I/O 操作的等待时间会浪费 CPU。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外， Android 还有一个专用的 &lt;code&gt;AndroidSchedulers.mainThread()&lt;/code&gt;，它指定的操作将在 Android 主线程运行。在日常开发过程中，使用做多的就是 &lt;code&gt;Schedulers.io()&lt;/code&gt;。RxJava 中 使用&lt;code&gt;subscribeOn()&lt;/code&gt;来指定&lt;code&gt;subscribe()&lt;/code&gt;触发/事件产生的线程，通过&lt;code&gt;observeOn()&lt;/code&gt;来指定事件处理的线程，典型的例子就是网络请求数据和刷新UI界面。&lt;br&gt;下面我们通过代码来验证下&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; Observable.just(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;).subscribeOn(Schedulers.io())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   .observeOn(AndroidSchedulers.mainThread())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   .subscribe(new Action1&amp;lt;Integer&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     public void call(Integer integer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    		 Log.d(&lt;span class=&quot;string&quot;&gt;&quot;Subscriber&quot;&lt;/span&gt;, Thread.currentThread().getName() + &lt;span class=&quot;string&quot;&gt;&quot;  &quot;&lt;/span&gt; + integer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;输入的结果是&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;main &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;main &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;RxJava-Retrofit-结合了&quot;&gt;&lt;a href=&quot;#RxJava-Retrofit-结合了&quot; class=&quot;headerlink&quot; title=&quot;RxJava + Retrofit 结合了&quot;&gt;&lt;/a&gt;RxJava + Retrofit 结合了&lt;/h1&gt;&lt;p&gt;关于Retrofit 的介绍和使用，请参考&lt;a href=&quot;/2016/06/24/1466752925430/&quot;&gt;Android 网络请求框架哪家强?&lt;/a&gt;一文。&lt;br&gt;首先利用Retrofit 定义一下接口&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@POST(&lt;span class=&quot;string&quot;&gt;&quot;onebox/news/query&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Observable&amp;lt;Result&amp;lt;List&amp;lt;News&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;newsList(@Query(&lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt;) String key, @Query(&lt;span class=&quot;string&quot;&gt;&quot;q&quot;&lt;/span&gt;) String q);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;利用RxJava 我们可以这样&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;RetrofitUtil.getInstance().createService(RetrofitService.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;).newsList(&lt;span class=&quot;string&quot;&gt;&quot;5173fa20d74cf85747dcf6f4636856af&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;\&quot;\&quot;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.subscribeOn(Schedulers.io())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.doOnSubscribe(new Action&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  public void call()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	 showLoadingDialog();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.subscribeOn(AndroidSchedulers.mainThread())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.observeOn(AndroidSchedulers.mainThread())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.subscribe(new Subscriber&amp;lt;Result&amp;lt;List&amp;lt;News&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  public void onCompleted()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	closeLoadingDialog();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  public void onError(Throwable e)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    closeLoadingDialog();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setResult(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, e.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  public void onNext(Result&amp;lt;List&amp;lt;News&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt; &lt;/span&gt;result)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (result.getError_code() == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	List&amp;lt;News&amp;gt; list = result.getResult();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (list != null &amp;amp;&amp;amp; !list.isEmpty())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        StringBuffer sb = new StringBuffer();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (News news : list)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sb.append(news.getFull_title() + &lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      	setResult(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, sb.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	setResult(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, result.getReason());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有些人会问，这么复杂，我用其它的方式也能实现，而且还能比这简单很多。的确，针对普通简单的业务需求来说，这种方式确实搞复杂了。但是， 我们再来看一种场景：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;场景：判断请求接口返回，检测token 是否失效, 如果失效，提示用户用户并且跳转到登录页面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;针对这样的场景，一般的做法就是 在返回结果中 解析json 后， 判断返回值，这样就会打乱 我们正常的 处理流程。然后，利用RxJava就可以这样处理&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.map(new Func1&amp;lt;Result&amp;lt;List&amp;lt;News&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;, Result&amp;lt;List&amp;lt;News&amp;gt;&amp;gt;&amp;gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  public Result&amp;lt;List&amp;lt;News&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt; &lt;/span&gt;call(Result&amp;lt;List&amp;lt;News&amp;gt;&amp;gt; result)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Result.TOKEN_CODE == result.getError_code())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; 跳转到用户登录页面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      startActivity(new Intent(AppManager.getInstance().currentActivity(), LoginActivity.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于这种类型的场景，一般需要构建全局的检测，那么按照RxJava 的方式， 只需通过&lt;code&gt;map()&lt;/code&gt;来处理加工后再返回。具体的RxJava+Retrofit 处理方式可具体代码请参考&lt;a href=&quot;https://github.com/yxcoding/HttpDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt;retrofithttp 包以及RxJava+Retrofit 请求demo。&lt;/p&gt;
&lt;p&gt;针对RxJava的简单介绍和RxJava结合Retrofit 的网络请求已经总结完了。总体来说， RxJava 在某种程度上，简化和清晰了异步事件序列的处理流程， 并且提供类似&lt;code&gt;map()&lt;/code&gt;、&lt;code&gt;flatMap()&lt;/code&gt; 等&lt;code&gt;lift()&lt;/code&gt;原理的操作方式，使得RxJava相对于其他处理异步事件序列的方式 更为简单，方便和强大。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;大概在几个月之前， 在CSDN上看见了RxJava这样的一个 新名词，但是也没有太注意，所以也就没去看它。但是过了一段时间，发现网上很多关于RxJava的博客和总结，Github上面的一些开源项目也都用到了RxJava，所以就决定开始研究这个神秘而又新颖的东西。起初看RxJava 很难理解，后来慢慢的也就理解了。&lt;br&gt;
    
    </summary>
    
      <category term="开发总结" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="移动开发" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/Android/"/>
    
    
      <category term="android" scheme="http://yxcoding.github.io/tags/android/"/>
    
      <category term="RxJava" scheme="http://yxcoding.github.io/tags/RxJava/"/>
    
      <category term="Retrofit" scheme="http://yxcoding.github.io/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>Paint、Canvas、Matrix使用讲解(一、Paint) [转载]</title>
    <link href="http://yxcoding.github.io/2016/07/07/1467861978320/"/>
    <id>http://yxcoding.github.io/2016/07/07/1467861978320/</id>
    <published>2016-07-07T03:26:18.000Z</published>
    <updated>2016-07-07T05:46:00.000Z</updated>
    
    <content type="html">&lt;p&gt;CSDN上一篇描述Paint系列知识原理的好文，描述的非常详细。&lt;a href=&quot;http://blog.csdn.net/tianjian4592/article/details/44336949&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文地址&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;CSDN上一篇描述Paint系列知识原理的好文，描述的非常详细。&lt;a href=&quot;http://blog.csdn.net/tianjian4592/article/details/44336949&quot;&gt;原文地址&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="开发总结" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="移动开发" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/Android/"/>
    
    
      <category term="android" scheme="http://yxcoding.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android 网络请求框架哪家强?</title>
    <link href="http://yxcoding.github.io/2016/06/24/1466752925430/"/>
    <id>http://yxcoding.github.io/2016/06/24/1466752925430/</id>
    <published>2016-06-24T07:22:05.000Z</published>
    <updated>2016-06-28T07:05:04.000Z</updated>
    
    <content type="html">&lt;p&gt;首先，我们来列一下目前一些知名的Android网络请求库：OKHttp、Android-async-http 、Volley、Retrofit，以上这些开源框架一直以来备受开发者的青睐，下面我们来统一说明一下各大网络请求框架的使用方法。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;OkHttp&quot;&gt;&lt;a href=&quot;#OkHttp&quot; class=&quot;headerlink&quot; title=&quot;OkHttp&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://square.github.io/okhttp/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;OkHttp&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;OKHttp 是一个高效的HTTP去请求库，功能非常之强大：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;支持SPDY(Google开发的基于TCP的应用层协议，用以最小化网络延迟，提升网络速度，优化用户的网络使用体验, 是HTTP协议的增强）,共享同一个Socket来处理同一个服务器的所有请求&lt;/li&gt;
&lt;li&gt;如果SPDY不可用，则通过连接池来减少请求延时&lt;/li&gt;
&lt;li&gt;无缝的支持GZIP来减少数据流量&lt;/li&gt;
&lt;li&gt;缓存响应数据来减少重复的网络请求&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;OkHttp 会从很多常用的连接问题中自动恢复。如果您的服务器配置了多个IP地址，当第一个IP连接失败的时候，OkHttp会自动尝试下一个IP。OkHttp还处理了代理服务器问题和SSL握手失败问题。&lt;br&gt;&lt;strong&gt;查看android 4.4的源码就可以发现原来的HttpURLConnection 已经替换成OKHttp来实现了，所以不说他牛逼都不行。可惜OKHttp 现阶段还不支持异步请求的回调接口。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本博客Demo利用Android Studio 开发&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;配置环境&quot;&gt;&lt;a href=&quot;#配置环境&quot; class=&quot;headerlink&quot; title=&quot;配置环境&quot;&gt;&lt;/a&gt;配置环境&lt;/h2&gt;&lt;p&gt;在build.gradle 中引入OkHttp 请求框架&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;compile &lt;span class=&quot;string&quot;&gt;&#39;com.squareup.okhttp3:okhttp:3.3.1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h2&gt;&lt;h3 id=&quot;GET-请求&quot;&gt;&lt;a href=&quot;#GET-请求&quot; class=&quot;headerlink&quot; title=&quot;GET 请求&quot;&gt;&lt;/a&gt;GET 请求&lt;/h3&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 发送Get 请求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @param context  通过context.getClass().getName() 设置请求tag，用来取消请求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @param url&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @param callback 基于okHttp Callback 封装的一层回调&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void sendGetRequest(Context context, String url, HttpRequestCallback callback)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Request request = new Request.Builder().tag(getTagByContext(context)).url(url).get().build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    okHttpClient.newCall(request).enqueue(getCallback(context, callback));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;POST-请求&quot;&gt;&lt;a href=&quot;#POST-请求&quot; class=&quot;headerlink&quot; title=&quot;POST 请求&quot;&gt;&lt;/a&gt;POST 请求&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 发送POST请求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @param context   通过context.getClass().getName() 设置请求tag，用来取消请求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @param url&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @param params    基于FormBody.Builder 封装的post请求参数对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @param callback  基于okHttp Callback 封装的一层回调&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void sendPostRequest(Context context, String url, RequestParams params, HttpRequestCallback callback)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Request request = new Request.Builder().tag(getTagByContext(context)).url(url).post(params.toParams()).build();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    okHttpClient.newCall(request).enqueue(getCallback(context, callback));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于OKHttp 不支持异步请求接口回调，所以Demo中重新封装了Callback利用Hanlder来处理请求回调，具体代码见&lt;a href=&quot;https://github.com/yxcoding/HttpDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt;okhttp 包。&lt;/p&gt;
&lt;h1 id=&quot;Android-async-http&quot;&gt;&lt;a href=&quot;#Android-async-http&quot; class=&quot;headerlink&quot; title=&quot;Android-async-http&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://loopj.com/android-async-http/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android-async-http&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;这个开源框架是基于Apache’s HttpClient 实现的， 所有的请求都是独立在UI主线程之外，通过回调接口方法处理请求结果，其实内部也是通过Handler Message 机制传递消息。它有以下特性:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;采用异步http请求，并通过匿名内部类处理回调结果&lt;/li&gt;
&lt;li&gt;http请求独立在UI主线程之外&lt;/li&gt;
&lt;li&gt;采用线程池来处理并发请求&lt;/li&gt;
&lt;li&gt;采用RequestParams类创建GET/POST参数&lt;/li&gt;
&lt;li&gt;不需要第三方包即可支持Multipart file文件上传&lt;/li&gt;
&lt;li&gt;大小只有25kb&lt;/li&gt;
&lt;li&gt;自动为各种移动电话处理连接断开时请求重连&lt;/li&gt;
&lt;li&gt;超快的自动gzip响应解码支持&lt;/li&gt;
&lt;li&gt;使用BinaryHttpResponseHandler类下载二进制文件(如图片)&lt;/li&gt;
&lt;li&gt;使用JsonHttpResponseHandler类可以自动将响应结果解析为json格式&lt;/li&gt;
&lt;li&gt;持久化cookie存储，可以将cookie保存到你的应用程序的SharedPreferences中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总体来说，Android-async-http 简单轻便实用，个人比较喜欢…&lt;/p&gt;
&lt;h2 id=&quot;配置环境-1&quot;&gt;&lt;a href=&quot;#配置环境-1&quot; class=&quot;headerlink&quot; title=&quot;配置环境&quot;&gt;&lt;/a&gt;配置环境&lt;/h2&gt;&lt;p&gt;在build.gradle 中引入Android-async-http 请求框架&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;compile &lt;span class=&quot;string&quot;&gt;&#39;com.loopj.android:android-async-http:1.4.9&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;基本使用-1&quot;&gt;&lt;a href=&quot;#基本使用-1&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h2&gt;&lt;h3 id=&quot;GET-请求-1&quot;&gt;&lt;a href=&quot;#GET-请求-1&quot; class=&quot;headerlink&quot; title=&quot;GET 请求&quot;&gt;&lt;/a&gt;GET 请求&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 发送Get 请求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @param context  用于取消http请求的凭证&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @param url&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @param callback 异步请求回调接口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void sendGetRequest(Context context, String url, AsyncHttpResponseHandler callback)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  asyncHttpClient.get(context, url, callback);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;POST-请求-1&quot;&gt;&lt;a href=&quot;#POST-请求-1&quot; class=&quot;headerlink&quot; title=&quot;POST 请求&quot;&gt;&lt;/a&gt;POST 请求&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 发送POST 请求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @param context   用于取消http请求的凭证&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @param url&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @param params    请求参数回对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @param callback  异步请求回调接口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void sendPostRequest(Context context, String url, RequestParams params, AsyncHttpResponseHandler callback)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  asyncHttpClient.post(context, url, params, callback);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Android-async-http 中封装了异步请求回调接口，可直接拿来使用。不用自己二次封装。同时可使用JsonHttpResponseHandler 类可以自动将响应结果解析为json格式。具体代码见&lt;a href=&quot;https://github.com/yxcoding/HttpDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt;asynhttp 包。&lt;/p&gt;
&lt;h1 id=&quot;Volley&quot;&gt;&lt;a href=&quot;#Volley&quot; class=&quot;headerlink&quot; title=&quot;Volley&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://square.github.io/okhttp/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Volley&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Volley 是2013年Google I/O开发者大会上被提出来的，目的是让Android应用网络操作更方便快捷。Volley也支持不同线程异步执行请求从而避免主线程阻塞。作为Android 干爹强力推出的开源框架，这里必须支持一下。Volley 有以下特性:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自动调度网络请求&lt;/li&gt;
&lt;li&gt;多个并发的网络连接&lt;/li&gt;
&lt;li&gt;通过使用标准的HTTP缓存机制保持磁盘和内存响应的一致&lt;/li&gt;
&lt;li&gt;支持请求优先级&lt;/li&gt;
&lt;li&gt;支持取消请求的强大API，可以取消单个请求或多个&lt;/li&gt;
&lt;li&gt;易于定制&lt;/li&gt;
&lt;li&gt;健壮性：便于正确的更新UI和获取数据&lt;/li&gt;
&lt;li&gt;包含调试和追踪工具&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;配置环境-2&quot;&gt;&lt;a href=&quot;#配置环境-2&quot; class=&quot;headerlink&quot; title=&quot;配置环境&quot;&gt;&lt;/a&gt;配置环境&lt;/h2&gt;&lt;p&gt;在build.gradle 中引入Volley请求框架&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;compile &lt;span class=&quot;string&quot;&gt;&#39;com.android.volley:volley:1.0.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;基本使用-2&quot;&gt;&lt;a href=&quot;#基本使用-2&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h2&gt;&lt;h3 id=&quot;GET-请求-2&quot;&gt;&lt;a href=&quot;#GET-请求-2&quot; class=&quot;headerlink&quot; title=&quot;GET 请求&quot;&gt;&lt;/a&gt;GET 请求&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* Get 请求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @param context&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @param url&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @param callback&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void sendGetRequest(Context context, String url, VolleyCallback callback)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    StringRequest req = new StringRequest(Request.Method.GET, url, callback, callback);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    req.setTag(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    requestQueue.add(req);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;POST-请求-2&quot;&gt;&lt;a href=&quot;#POST-请求-2&quot; class=&quot;headerlink&quot; title=&quot;POST 请求&quot;&gt;&lt;/a&gt;POST 请求&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* 发送Post请求&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @param context&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @param url&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @param params&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* @param callback&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void sendPostRequest(Context context, String url, final VolleyRequestParams params, VolleyCallback callback)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    StringRequest req = new StringRequest(Request.Method.POST, url, callback, callback)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        protected Map&amp;lt;String, String&amp;gt; getParams() throws AuthFailureError&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return params;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    req.setTag(context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    requestQueue.add(req);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Volley 中通过RequestQueue 用来执行请求的请求队列，通过Request来构造一个请求对象。Volley提供了以下几种类型的Request:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;StringRequest 响应的主体为字符串&lt;/li&gt;
&lt;li&gt;JsonArrayRequest 发送和接收JSON数组&lt;/li&gt;
&lt;li&gt;JsonObjectRequest 发送和接收JSON对象&lt;/li&gt;
&lt;li&gt;ImageRequest 发送和接收Image&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;抽象了底层的Http Client等实现的细节， 为开发者提供了方便的接口。Demo中基于Response.Listener和Response.ErrorListener重新整合封装了一个异步请求回调接口VolleyCallback。具体代码见&lt;a href=&quot;https://github.com/yxcoding/HttpDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt;volleyhttp 包。&lt;/p&gt;
&lt;h1 id=&quot;Retrofit&quot;&gt;&lt;a href=&quot;#Retrofit&quot; class=&quot;headerlink&quot; title=&quot;Retrofit&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://square.github.io/retrofit/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Retrofit&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Retrofit 和 OKHttp 一样，都是Square开源的网络请求框架， Retrofit 对 OKHttp做了封装。Retrofit 为Android网络请求提供了REST方式的HTTP请求。Retrofit通过接口方法注解的方式统一规范请求接口，例如：@GET、@POST、@Multipart 等等，相比其他其他的网络请求库，Retrofit 具有独特的使用方式，是一套RESTful 架构的客户端实现。提供了多种类型转JAVA对象的转换器。服务器端接口是是一套RESTful架构或者有多种数据返回格式的推荐使用这种方式。&lt;/p&gt;
&lt;h2 id=&quot;配置环境-3&quot;&gt;&lt;a href=&quot;#配置环境-3&quot; class=&quot;headerlink&quot; title=&quot;配置环境&quot;&gt;&lt;/a&gt;配置环境&lt;/h2&gt;&lt;p&gt;在build.gradle 中引入Retrofit 请求框架&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;compile &lt;span class=&quot;string&quot;&gt;&#39;com.squareup.retrofit2:retrofit:2.1.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;基本使用-3&quot;&gt;&lt;a href=&quot;#基本使用-3&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h2&gt;&lt;h3 id=&quot;GET-请求-3&quot;&gt;&lt;a href=&quot;#GET-请求-3&quot; class=&quot;headerlink&quot; title=&quot;GET 请求&quot;&gt;&lt;/a&gt;GET 请求&lt;/h3&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@GET(&lt;span class=&quot;string&quot;&gt;&quot;onebox/news/query&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Call&amp;lt;Result&amp;lt;List&amp;lt;News&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;getNewsList(@Query(&lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt;) String key, @Query(&lt;span class=&quot;string&quot;&gt;&quot;q&quot;&lt;/span&gt;) String q);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;POST-请求-3&quot;&gt;&lt;a href=&quot;#POST-请求-3&quot; class=&quot;headerlink&quot; title=&quot;POST 请求&quot;&gt;&lt;/a&gt;POST 请求&lt;/h3&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@POST(&lt;span class=&quot;string&quot;&gt;&quot;onebox/news/query&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; Call&amp;lt;Result&amp;lt;List&amp;lt;News&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;getNewsListByPost(@Query(&lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt;) String key, @Query(&lt;span class=&quot;string&quot;&gt;&quot;q&quot;&lt;/span&gt;) String q);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Retrofit 和 OKHttp 一样，从2.0 开始，通过定义一个Call 来发起请求，并且可以通过这个call 对象调用call.cancel() 来取消请求。Retrofit 定义了retrofit2.Callback 的异步回调接口&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public interface Callback&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  void onResponse(Call&amp;lt;T&amp;gt; call, Response&amp;lt;T&amp;gt; response);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  void onFailure(Call&amp;lt;T&amp;gt; call, Throwable t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;两个方法都是在主线程中被调用，通过定义泛型T来扩展返回的POJO对象。上文说到Retrofit 提供了JSON 转换器支持，通过设置&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;addConverterFactory(GsonConverterFactory.create())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;来内部转换POJO对象。&lt;br&gt;以下为Retrofit 支持的格式转换类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Gson: com.squareup.retrofit2:converter-gson&lt;/li&gt;
&lt;li&gt;Jackson: com.squareup.retrofit2:converter-jackson&lt;/li&gt;
&lt;li&gt;Moshi: com.squareup.retrofit2:converter-moshi&lt;/li&gt;
&lt;li&gt;Protobuf: com.squareup.retrofit2:converter-protobuf&lt;/li&gt;
&lt;li&gt;Wire: com.squareup.retrofit2:converter-wire&lt;/li&gt;
&lt;li&gt;Simple XML: com.squareup.retrofit2:converter-simplexml&lt;/li&gt;
&lt;li&gt;Scalars (primitives, boxed, and String): com.squareup.retrofit2:converter-scalars&lt;br&gt;具体代码请参考&lt;a href=&quot;https://github.com/yxcoding/HttpDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt;retrofithttp 包。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;以上四种网络请求框架，各有各的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OKHttp 和 Retrofit 都是来自Square，质量和性能都很优秀。OKHttp 功能十分强大，可以应对几乎所有的商业场景应用，大家可以根据OKHttp 自由扩展和封装。&lt;/li&gt;
&lt;li&gt;Retrofit 内部也是根据OkHttp 进行了扩展，它把http 请求处理机制交给了OKHttp处理。个人觉得Retrofit 更加人性化，利用RESTful 架构使得接口形式更加规范清晰统一。&lt;/li&gt;
&lt;li&gt;Volley 除了是一个网络请求框架，还是一个图片加载框架，可以二合一使用。&lt;/li&gt;
&lt;li&gt;Android-async-http 个人比较喜欢这个框架，简单方便，异步请求回调，文件上传和下载使用简单，对网络请求要求不是很高的项目完全和可以使用这个框架。可以这么说，Android-async-http 进行了高强度的封装， 使得开发者 白痴式的调用，让开发者更加关注于业务发开。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;首先，我们来列一下目前一些知名的Android网络请求库：OKHttp、Android-async-http 、Volley、Retrofit，以上这些开源框架一直以来备受开发者的青睐，下面我们来统一说明一下各大网络请求框架的使用方法。&lt;br&gt;
    
    </summary>
    
      <category term="开发总结" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="移动开发" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/Android/"/>
    
    
      <category term="android" scheme="http://yxcoding.github.io/tags/android/"/>
    
      <category term="开源库" scheme="http://yxcoding.github.io/tags/%E5%BC%80%E6%BA%90%E5%BA%93/"/>
    
      <category term="网络请求" scheme="http://yxcoding.github.io/tags/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Top 100 的Android 开源库[转载]</title>
    <link href="http://yxcoding.github.io/2016/06/23/1494933779424/"/>
    <id>http://yxcoding.github.io/2016/06/23/1494933779424/</id>
    <published>2016-06-23T02:48:00.000Z</published>
    <updated>2017-06-02T11:43:45.000Z</updated>
    
    <content type="html">&lt;p&gt;今天看到stormzhang发的一篇文章，觉得非常不错，特意转载一下，大家一起分享，&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;amp;mid=402675429&amp;amp;idx=1&amp;amp;sn=ba3afd2069004b220eaa8a77fdecbaf7&amp;amp;scene=23&amp;amp;srcid=0327HSwrg5A4kpYmncHp8TgL#rd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文地址&lt;/a&gt;，记录了github上关于android的排名前100的开源软件，都是干货&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;React Native&lt;br&gt;这个是 Facebook 在 React.js Conf 2015 大会上推出的基于 JavaScript 的开源框架 React Native, 该框架结合了 Web 应用和 Native 应用的优势, 可以使用 JavaScript 来开发 iOS 和 Android 原生应用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Universal ImageLoader&lt;br&gt;ImageLoader 是最早开源的 Android 图片缓存库, 强大的缓存机制, 早期被广泛 Android 应用使用, 至今仍然有很多 Android 开发者在使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RxJava&lt;br&gt;RxJava 是一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库, 简单来说它就是一个实现异步操作的库, RxJava 的优点在于一个词 “简洁”, 使用它就算你程序逻辑有多么复杂, 它依然能够保持简洁易懂&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Retrofit&lt;br&gt;Retrofit 是 Square 公司出品的 HTTP 请求库, 同时是 Square 是最早开源项目之一, Retrofit 是目前 Android 最流行的 Http Client 库之一, 目前版本是 Retrofit2.0 Beta4, 越来越多 Android 开发者开始使用这个请求库了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OkHttp&lt;br&gt;OkHttp 是 Square 公司出品的 HTTP 另一个请求库, Google 不推荐人们使用 HttpClient, 可是 HttpURLConnection 实在是太难用了, 因此很多人使用了 OkHttp 来解决这问题, 据说 Android4.4 的源码中可以看到 HttpURLConnection 已经替换成 OkHttp 实现呢&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SlidingMenu&lt;br&gt;一个侧滑菜单开源库, 在 Google 自己原生态的侧滑菜单 NavigationDrawer 没有出现之前, 这个库就已经被广泛使用, 可是到现在这个库已经被放弃了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Picasso&lt;br&gt;Picasso 是 Square 公司出品的一款图片缓存库, 主导者是 JakeWharton 大神&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Android-Best-Practices&lt;br&gt;Android 开发最佳实践, 里面所介绍的经验都是来自于 Futurice 公司 Android 开发者, 介绍内容有 Android 开发规范、架构、布局技巧, 以及使用一些有助于快速开发相关工具等等, 非常适合新手去学习&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;EventBus&lt;br&gt;EventBus 是 Android 事件管理总线, 使用它可以替带 Android BroadCast, BroadCastReceiver, Handler 在 Activity, Fragment, Service, 线程之间传递消息, 大大简化了事件传递逻辑&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;android-async-http&lt;br&gt;android-async-http 是 Android 一款老牌异步请求库, 专门对 Android 在 Apache 的 HttpClient 基础上构建的异步 http 连接, 该库有很多特征, 例如: 库的 size 小, 支持文件上传不需使用第三方库支持, 内部使用线程池来处理并发, 等等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fresco&lt;br&gt;Fresco 是 FaceBook 公司出品的一款图片缓存库, Fresco 是一个强大的图片加载组件, 支持加载 Gif 图和 WebP 格式, 支持 Android2.3(API level 9) 及其以上系统, Fresco 中设计了 Image pipeline 和 Drawees 两个模块各施其职, 使得图片完美加载出来, 想知道更多 image pipeline 和 Drawees 有关于它的特性, 可以到它&lt;a href=&quot;http://fresco-cn.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方平台&lt;/a&gt;看介绍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ZXing&lt;br&gt;ZXing 是二维码领域中名气最大的开源项目, 它提供了多个平台的二维码/条形码扫描解决方案, 拥有扫描快, 识别率高, 使用简单等特点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LeakCanary&lt;br&gt;LeakCanary 是 Square 公司出的一款检测内存泄露工具, 该工具能帮助你在开发阶段方便的检测出内存泄露的问题, 使用起来非常简单方便&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Butter Knife&lt;br&gt;由 JakeWharton 大神开发出来的, ButterKnife 是 View 注入框架, 使用它为了简写很多 findViewById 代码, 同时还支持 View 的一些事件处理函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MPAndroidChart&lt;br&gt;MPAndroidChart 是一款强大的 Android 图表库, 支持各种各样图表显示, 能想到的图表样式这里几乎都有, 图表还支持选择, 拖放和缩放动画效果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ActionBarSherlock&lt;br&gt;ActionBarSherlock 这个库是 JakeWharton 大神开发出来支持 Android3.0 以下版本的, 后来慢慢的 Google 也提供了 AppCompat 库来支持 Android3.0 以下版本使用 ActionBar, 因此不建议再使用这个库了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AndroidAnnotations&lt;br&gt;AndroidAnnotations 是一个能够让你快速进行 Android 开发的开源框架, 它能让你专注于真正重要的地方, 使代码更加精简, 使项目更加容易维护, 它的目标就是 “Fast Android Development.Easy maintainance”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ViewPagerIndicator&lt;br&gt;由 JakeWharton 大神开发出来的一个 ViewPager 指示器, 使用起来简单方便, 可高度定制, 开发出各种各样动画效果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Glide&lt;br&gt;Glide 是 Google 员工的开源项目, 广泛应用于 Google 一些 App 上, 在2014年 Google I/O 大会上被推荐使用, Glide 和 Picasso 被人拿来比较研究过, Glide 与 Picasso 有 90% 的相似度, 但在一些细节上还是有点区别的, 各有各优缺点看君选择&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HomeMirror&lt;br&gt;开发者是由一名程序媛 Hannah Mittelstaedt , HomeMirror 是一款 Android 镜子应用, 目前它能实现日期, 时间, 天气, 生日信息, 事件提醒器, 骑车天气的推荐, 股票信息, XKCD 漫画网站的新帖等等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Android-PullToRefresh&lt;br&gt;一个强大的拉动刷新开源项目，支持各种控件下拉刷新，ListView、ViewPager、WebView、ExpandableListView、GridView、ScrollView、Horizontal ScrollView、Fragment 上下左右拉动刷新, 不过现在这个项目已经停止维护更新了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MaterialDesignLibrary&lt;br&gt;这个库控件都是遵循了 Google Material Design 设计规范开发出来, 例如有: Flat Button, Rectangle Button, CheckBox, Switch, Progress bar circular indeterminate 等等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PhotoView&lt;br&gt;PhotoView 是 ImageView 的子类, 支持所有 ImageView 的源生行为, 例如: 支持 Pinch 手势自由缩放, 支持双击放大/还原, 支持平滑滚动等等, 并且非常方便的与 ImageLoader/Picasso 之类的网络图片读取库集成使用, 还方便的与 ViewPager 等同样支持滑动手势的控件集成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RxAndroid&lt;br&gt;由 JakeWharton 大神主导开发的项目, RxAndroid 是 RxJava 的一个针对 Android 平台的扩展, 主要用于 Android 开发&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Material Dialogs&lt;br&gt;Material Dialogs 是一个可高度定制易用, 符合 Material Design 风格的 Dialogs, 兼容 Android API8 以上版本, 个人使用感觉它完全可替代 Android 原生那个, 比原生那个更加简单易用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AndroidObservableScrollView&lt;br&gt;ObservableScrollView 是一款用于在滚动视图中观测滚动事件的 Android 库, 它能够轻而易举地与 Android 5.0 Lollipop 引进的工具栏 (Toolbar) 进行交互, 还可以帮助开发者实现拥有 Material Design 应用视觉体验的界面外观, 支持ListView, ScrollView, WebView, RecyclerView, GridView组件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Android-Bootstrap&lt;br&gt;Android 版的 Bootstrap, 利用这个库能够实现很多 Bootstrap 样式风格, 之前有学过 Html 的人就知道 Bootstrap 是什么玩意啦&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AndroidSwipeLayout&lt;br&gt;开发者是代码家, AndroidSwipeLayout 是一个支持ListView, GridView, ViewGroup等等左右上下滑动出操作菜单, 类似 qq 消息列表向左滑动显示出多某条信息的操作菜单&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dagger&lt;br&gt;Dagger 是 Square 公司出品的一个针对 Android 和 Java 的快速依赖注入器, 能够有效减少你敲代码量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ListViewAnimations&lt;br&gt;一个轻轻松松给 Android ListView 添加动画效果的库, 支持的动画有: Alpha, SwingRightIn, SwingLeftIn, SwingBottomIn, SwingRightIn and ScaleIn等等, 使用它能很容易就实现帅爆的效果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PagerSlidingTabStrip&lt;br&gt;PagerSlidingTabStrip 是一个给 Android ViewPager添加上 ViewPager 滑动指示器, 从 GitHub 上面看, 这个库似乎没有人在维护了, 请谨慎使用该库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AndroidViewAnimations&lt;br&gt;开发者是代码家, 这个库实现很多很酷炫的 Android 动画, 动画效果是借鉴 Animate.css 来实现的, 非常酷, 而且这个使用起来也是非常简单&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AndroidSlidingUpPanel&lt;br&gt;AndroidSlidingUpPanel 是一个上拉面板, 就是向上滑动的时候往上飞出一个显示面板控件, 该库效果在 Google Music, Google Maps and Rdio等 App 中用到&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MaterialDrawer&lt;br&gt;MaterialDrawer 是一个类似 Google 官方 NavigationView 侧滑显示控件, 个人认为 NavigationView 并没有 MaterialDrawer 实用, 因为 NavigationView 自由度不是很好, 很多都写死了不可以自由定义布局, 而 MaterialDrawer 能够实现跟 NavigationView 一样的效果, 同时还支持自定义效果, 自由度非常高&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Material-Animations&lt;br&gt;Material-Animations 是一个很好过渡动画库, 可以应用于 Activity 与 Activity 之间的跳转, Fragment 与 Fragment 之间的跳转, 以及各个 View 变化前后的过渡动画&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MaterialViewPager&lt;br&gt;一个简单易用 Material Design 风格的 ViewPager 库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ion&lt;br&gt;ion 是一个让 Android 的网络操作变得极其简单, 支持异步获取和处理JSON, 支持 Android 文件下载 (同时支持下载进度条绑定), 支持安全链接和代理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stetho&lt;br&gt;Stetho是 Facebook 出品的一个强大的 Android 调试工具,使用该工具你可以在 Chrome Developer Tools查看App的布局, 网络请求(仅限使用Volley, okhttp的网络请求库), sqlite, preference, 一切都是可视化的操作,无须自己在去使用adb, 也不需要root你的设备&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fastjson&lt;br&gt;Fastjson是一个Java语言编写的高性能功能完善的JSON库。它采用一种“假定有序快速匹配”的算法，把JSON Parse的性能提升到极致，是目前Java语言中最快的JSON库。Fastjson接口简单易用，已经被广泛使用在缓存序列化、协议交互、Web输出、Android客户端等多种应用场景&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Card Library&lt;br&gt;Cardslib 是早期由 Gabriele Mariotti 开发的一个为开发者方便实现各种 Card UI 的 Android 开源代码库, 后来 Google 官方提供自己封装了 CardView 在 v7 包下, 使用 Google 官方的可以完全替代了这个库, 因此这个也被弃用了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;android-Ultra-Pull-To-Refresh&lt;br&gt;开发者是廖祜秋, 这个是一个非常强大的下拉刷新库, 继承 ViewGroup 可以包含任何 View, 功能甚至比 SwipeRefreshLayout 强大, 使用起来也非常容易, 还可以自由定制自己的 UI 样式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;greenDAO&lt;br&gt;greenDAO 是一个可以帮助 Android 开发者快速将 Java 对象映射到 SQLite 数据库的表单中的 ORM解决方案, 通过使用一个简单的面向对象 API, 开发者可以对 Java 对象进行存储, 更新, 删除和查询, greenDAO 相对 OrmLite, AndrORM 这两个 ORM 开源库, 性能是最高的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AndroidStaggeredGrid&lt;br&gt;AndroidStaggeredGrid 是一个支持多列并且每一行的 item 大小不一, 交错排列的 GridView, 就是实现瀑布流样式效果, 目前该库已经被弃用了, 开发者建议我们使用 Google 官方控件 RecyleView 中的 StaggeredGridLayoutManager 布局来实现瀑布流效果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Otto&lt;br&gt;Otto 是 Square 公司出的一个事件库 (pub/sub 模式), 用来简化应用程序组件之间的通讯, otto 修改自 Google 的 Guava 库, 专门为 Android 平台进行了优化, 与上面介绍的 EventBus 相比, 两个库各有各的优点, 完全取决于我们自己项目的需求来选择它们哪一个&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;xUtils&lt;br&gt;xUtils 是一个快速开发框架, 里面包含 DbUtils, ViewUtils, HttpUtils, BitmapUtils 四大模块, 可用于快速开发, 支持大文件上传, 拥有更加灵活的 ORM, 最低兼容 Android 2.2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Realm Java&lt;br&gt;Realm 一个轻量的 Android 版本的数据存储库, 比 Android 原生系统的 SQLite 更加简洁快速对数据进行操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AndroidCleanArchitecture&lt;br&gt;CleanArchitecture 是一个非常典型使用 MVP 架构的项目, 大家如果还没有理解 MVP 架构的可以看看这个项目&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;StickyListHeaders&lt;br&gt;StickyListHeaders 是一个实现能够固定在屏幕顶部的ListView Section Header库, 就是当前 section 的 header 固定在屏幕顶部, 当滑动到其他 section 时, 其他 section 的 header 会代替之前的 section 的 header, 固定到屏幕顶部, 类似于 Android4.0 的手机通讯录的效果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AppIntro&lt;br&gt;AppIntro 是一个让人轻松快速搭建漂亮酷炫的引导页库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ActiveAndroid&lt;br&gt;ActiveAndroid 是采用Rails中的「Active Record」架构模式设计的适用于 Android 平台的轻量级 ORM 架构, 几乎可以不用写任何 SQL 代码实现快速开发&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Android Volley&lt;br&gt;Volley 是谷歌官方开发团队在 2013 年 Google I/O 大会推出的一个新的网络通信框架, 这个框架把 AsyncHttpClient 和 Universal-Image-Loader 的优点集于了一身,既可以像AsyncHttpClient 一样非常简单地进行 HTTP 通信,也可以像 Universal-Image-Loader 一样轻松加载网络上的图片, 这个库并不是官方的, 只是托管同步在 Maven,  官方只提供的 Jar 包&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TwoWayView&lt;br&gt;TwoWayView 是简化 RecyclerView 开发的一个库, 可以在其 Base LayoutManager 基础上构建各种各样的布局, 该库内置了几个常用布局 List, Grid, Staggered Grid,Spannable Grid&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ShowcaseView&lt;br&gt;ShowcaseView 是一个非常适合用于对用户进行第一次使用进行指导的库,使用起来非常简单还可以自定义样式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Calligraphy&lt;br&gt;Calligraphy 是一个用来简化 Android 应用使用自定义字体的类库, 该类库会自动查找应用中的 TextView 并设置其使用的字体&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NineOldAndroids&lt;br&gt;NineOldAndroids 由 JakeWharton 大神开发的一个向下兼容的动画库, 主要是使低于API 11的系统也能够使用 View 的属性动画, 不过现在 JakeWharton 大神已经不推荐使用该库, 而是推荐我们使用官方封装在 Support 库里面的动画&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FloatingActionButton&lt;br&gt;FloatingActionButton 是一个悬浮操作按钮, 官方在 Support Design 包下也有封装一个类似这个库效果的 FloatingActionButton, 值得说明的是这个库是早在官方封装之前就存在的, 个人感觉这个库比官方那个更加好用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CircleImageView&lt;br&gt;CircleImageView 是一个轻松帮你实现圆形效果 ImageView 图片库, CircleImageView 是基于 ImageView 扩展出来, 因此它拥有 ImageView 控件所有属性, 简单易用值得你使用的库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Material&lt;br&gt;Material 是将 Material Design 风格控件封装在该库当中, 目前封装有Progress, Button, Switch, Slider, Spinner, Text Field, TabPageIndicator, SnackBar, Dialog, BottomSheetDialog, Dynamic theme&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ActionBar-PullToRefresh&lt;br&gt;ActionBar-PullToRefresh 是一个下拉刷新, 下拉刷新时在 ActionBar 出现加载中提示的库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FloatingActionButton&lt;br&gt;又一个悬浮操作按钮库, 该库添加支持监听滑滚动事件, 当向下滑时按钮隐藏, 向上滑时按钮显示, 还有动画效果, 支持监听 ListView, ScrollView, RecylerView&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AndroidAsync&lt;br&gt;AndroidAsync 是一款基于 NIO 的低端 Android 异步 socket, http (client+server), websocket 和 socket.io 网络通信协议类库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rebound&lt;br&gt;Rebound 是 Facebook 推出的一个弹性动画库, 可以让动画看起来真实自然, 像真实世界的物理运动, 带有力的效果, 使用的参数则是 Facebook 的 origami 中使用的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;android-common-lib&lt;br&gt;android-common-lib 是 Trinea 大神收集的一些开发通用的缓存, 公共 View 以及一些常用工具类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RippleEffect&lt;br&gt;RippleEffect 是一个实现在 Android 任何组件点击出现 Material Design 的波纹效果, 向下兼容到 Android API9&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SmoothProgressBar&lt;br&gt;SmoothProgressBar 是一个帮你的 App 方便实现可定制, 平滑动画的水平滚动进度条库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RecyclerView Animators&lt;br&gt;RecyclerView Animators 是一个对 Recycler 控件的 Item 添加以及删除增加动画效果, 动画效果有Scale, Fade, Flip, Slide 里面各种各样效果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;circular-progress-button&lt;br&gt;一个带进度显示的 Button, 效果和动画做的都非常赞&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Droid Plugin&lt;br&gt;DroidPlugin 是 360 手机助手在 Android 系统上实现了一种新的插件机制: 它可以在无需安装, 修改的情况下运行APK文件, 此机制对改进大型APP的架构, 实现多团队协作开发具有一定的好处&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dynamic-load-apk&lt;br&gt;开发者是singwhatiwanna, 是《Android 开发艺术探索》书籍的作者, 这个是作者联合另两位开发者啸(时之沙)和宋思宇花了几个月时间研究出来的 Apk 动态加载框架, 想了解更多关于这框架可到作者博客看这篇文章「&lt;a href=&quot;http://blog.csdn.net/singwhatiwanna/article/details/39937639」&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/singwhatiwanna/article/details/39937639」&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ExoPlayer&lt;br&gt;ExoPlayer 是Google 开发团队开源出来的一个媒体播放库, 比 Android 框架原生的 MediaPlayer 拥有更多优点支持动态的自适应流 HTTP(DASH) 和 平滑流, 支持高级的HLS特性, 支持自定义和扩治你的使用场景等等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Crouton&lt;br&gt;Crouton 是一个显示提示信息的显示工具类, 可以用来代替Toast, 默认显示在窗口的顶部, 可以按队列一个接着一个显示, 不过该库已经被弃用, 不推荐使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RoboSpice&lt;br&gt;RoboSpice 是一个使你建立异步的长时间的运行任务异常轻松的一个网络库，在网络请求，缓存支持，和提供开箱即用的rest请求方面尤为强大&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hugo&lt;br&gt;Hugo 是 JakeWharton 大神推出的一个用于打印 Log, hugo 是基于注解被调用的, 引入相关依赖后, 在方法上加上 @DebugLog 即可输出 Log, 使用非常简单&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AsyncHttpClient&lt;br&gt;AsyncHttpClient 是又一款 Android 异步请求库, 该库支持 WebSocket 协议, 使用起来也比较简单易用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UltimateRecyclerView&lt;br&gt;UltimateRecyclerView 是一个功能强大的 RecyclerView(advanced and flexible version of ListView), 包括了下拉刷新, 加载更多, 多种动画, 空数据提示, 拖动排序, 视差处理, 工具栏渐变, 滑动删除, 自定义floating button, 多种刷新效果, scrollbar, sticky header, 多 layout 支持等等元素, 而且使用起来跟 RecyclerView 一样的方便&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MaterialEditText&lt;br&gt;MaterialEditText 是就职于 Flipboard 的员工 「扔物线」开发的, 在 AppCompat v21 中也提供了 Material Design 的控件 EditText, 可是由于比较难用, 没有提供设置颜色的 Api, 于是就产生这个第三方库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Side Menu&lt;br&gt;Side Menu 是 「Yalantis」组织开源出来, 该组织因开源出一些动画很棒的开源库为大家所熟知该库是其中一个, 该库是提供翻页动画效果的侧边菜单, 动画体验超赞的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DragSortListView&lt;br&gt;DragSortListView 是一个可以实现拖动排序, 滑动删除的 listview 控件, 注意的是作者对该库已经放弃维护更新了, 不过感兴趣的人可以去研究一下&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TimesSquare&lt;br&gt;TimesSquare 是 Square 公司出品的一款显示日历选择日期的控件, 可以让用户选择多个日期&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GreenDroid&lt;br&gt;GreenDroid 是一个封装好的 Android UI 界面库, 不过改库已经被弃用了，不建议使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Logger&lt;br&gt;Logger 是一个简单, 漂亮, 强大 Android 打印日志库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Acra&lt;br&gt;Acra 是一个能够让 Android 应用自动将崩溃报告以谷歌文档电子表的形式进行发送的库, 旨在当应用发生崩溃或出现错误行为时, 开发者可以获取到相关数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FadingActionBar&lt;br&gt;FadingActionBar 是一个支持 ListView, ScrollView, WebView 向下滚动时逐渐显示 ActionBar 库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AndroidImageSlider&lt;br&gt;AndroidImageSlider 库开发者是代码家, 该库是为 Banner 图片滑动提供多种动画效果, 还可以轻易为 Banner 加载网络图片&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SystemBarTint&lt;br&gt;SystemBarTint 是一个实现沉浸式状态栏库, 适用于 Android 系统 4.4 其以上的版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MenuDrawer&lt;br&gt;MenuDrawer 是一款滑出式菜单库, 通过拖动屏幕边缘滑出菜单, 支持屏幕上下左右划出, 支持当前 View 处于上下层, 支持 Windows 边缘, ListView 边缘, ViewPager 变化划出菜单等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RoundedImageView&lt;br&gt;RoundedImageView 一个快速支持图片圆角显示效果的库, 该库特点是能快速加载, 为了提高加载速度, 该库不用创建原始位图的副本, 不使用clipPath, 不使用 setXfermode 裁剪的位图等方式来实现 ImageView 圆角, 使用也非常简单&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Afinal&lt;br&gt;Afinal 是一个 android 的 sqlite orm 和 ioc 框架, 同时封装了 android 中的 http 框架, 使其更加简单易用, 使用 finalBitmap, 无需考虑 bitmap 在 android 中加载的时候 oom 的问题和快速滑动的时候图片加载位置错位等问题, Afinal 的宗旨是简洁, 快速, 约定大于配置的方式, 尽量一行代码完成所有事情&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;android-pulltorefresh&lt;br&gt;一个强大的拉动刷新开源项目, 支持各种控件下拉刷新, ListView, ViewPager, WebView, ExpandableListView, GridView, ScrollView, Horizontal, ScrollView, Fragment 上下左右拉动刷新, 并且它实现的下拉刷新 ListView 在 item 不足一屏情况下也不会显示刷新提示, 体验更好, 但是该库已经停止维护, 因此不建议使用, 可考虑使用 Android-Ultra-Pull-to-Refresh&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bolts-Android&lt;br&gt;Bolts 是一款底层类库集合, 在后台实现异步操作, 并提供接口反馈当前异步执行的程度 (可以通过接口实现UI进度更新), 最后反馈执行的结果给UI主线程, 与AsyncTask比较: (1)使用的是无大小限制的线程池; (2)任务可组合可级联,防止了代码耦合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NumberProgressBar&lt;br&gt;NumberProgressBar 开发者是代码家, 这是一个带简约性感数字显示的进度条库, 使用非常简单方便&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SwipeBackLayout&lt;br&gt;SwipeBackLayout 是一个支持屏幕上下左右滑动返回上层 Activity, 关闭当前 Activity, 类似简书 App&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;android-gif-drawable&lt;br&gt;一个支持 gif 显示的 view, 用 jni 实现的, 编译生成 so 库后直接 xml 定义 view 即可, 简单易用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vitamio&lt;br&gt;Vitamio 是一款 Android 与 iOS 平台上的全能多媒体开发框架, 特点：(1) 全面支持硬件解码与 GPU 渲染, (2) 能够流畅播放 720P 甚至 1080P 高清 MKV, FLV, MP4, MOV, TS, RMVB 等常见格式的视频, (3) 在 Android 与 iOS 上跨平台支持 MMS, RTSP, RTMP, HLS(m3u8)等常见的多种视频流媒体协议, 包括点播与直播&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SmartTabLayout&lt;br&gt;SmartTabLayout 是一个自定义的 Tab title strip, 基于 Google Samples 中的 android-SlidingTabBasic 项目, 滑动时 Indicator 可平滑过渡&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;uCrop&lt;br&gt;uCrop 是&lt;a href=&quot;https://yalantis.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Yalantis&lt;/a&gt; 组织开源的图片裁剪库, 支持缩放, 旋转图片, 支持各种比例的裁剪框, 非常强大的一个图片裁剪库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;android-crop&lt;br&gt;又一个图片裁剪库, 向下兼容到 Api 10, 个人感觉这个库并没有比上面介绍的 uCrop 强大&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HoloEveryWhere&lt;br&gt;HoloEveryWhere 是一套 Android 开发库, 提供了全套 Holo Style 控件, 它的外观与功能和标准 Holo Style 控件基本相同, 唯一不同的是它可以运行在低于 4.0 版本的 Android 系统上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AVLoadingIndicatorView&lt;br&gt;AVLoadingIndicatorView 库含有各种各样漂亮的加载动画效果, 使用起来也非常简单, 和平时使用 ProgressBar 一样&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sweet Alert Dialog&lt;br&gt;Android 版的 SweetAlert, 清新文艺, 快意灵动的甜心弹框, 灵感来源于 JS 版「SweetAlert」&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天看到stormzhang发的一篇文章，觉得非常不错，特意转载一下，大家一起分享，&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;amp;mid=402675429&amp;amp;idx=1&amp;amp;sn=ba3afd2069004b220eaa8a77fdecbaf7&amp;amp;scene=23&amp;amp;srcid=0327HSwrg5A4kpYmncHp8TgL#rd&quot;&gt;原文地址&lt;/a&gt;，记录了github上关于android的排名前100的开源软件，都是干货&lt;br&gt;
    
    </summary>
    
      <category term="干货分享" scheme="http://yxcoding.github.io/categories/%E5%B9%B2%E8%B4%A7%E5%88%86%E4%BA%AB/"/>
    
      <category term="移动开发" scheme="http://yxcoding.github.io/categories/%E5%B9%B2%E8%B4%A7%E5%88%86%E4%BA%AB/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android" scheme="http://yxcoding.github.io/categories/%E5%B9%B2%E8%B4%A7%E5%88%86%E4%BA%AB/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/Android/"/>
    
    
      <category term="android" scheme="http://yxcoding.github.io/tags/android/"/>
    
      <category term="开源库" scheme="http://yxcoding.github.io/tags/%E5%BC%80%E6%BA%90%E5%BA%93/"/>
    
      <category term="github" scheme="http://yxcoding.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Linux MySql 设置远程登录权限</title>
    <link href="http://yxcoding.github.io/2016/06/23/1474977250401/"/>
    <id>http://yxcoding.github.io/2016/06/23/1474977250401/</id>
    <published>2016-06-23T02:36:00.000Z</published>
    <updated>2017-06-02T11:44:07.000Z</updated>
    
    <content type="html">&lt;p&gt;在已经安装好mysql 的linux服务器上，3360端口默认监听的是127.0.0.1也就是本地地址，要想远程登录mysql服务器，必须更改监听地址…&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://7xprrr.com1.z0.glb.clouddn.com//image/20160108/1452251700895098190.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以使用命令  netstat -an | grep 3306 查看3306端口&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tcp	 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;	&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;3306&lt;/span&gt;  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:*&lt;/span&gt;   LISTEN&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;修改地址:&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd /etc/mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo vi my.cnf&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;找到 bind-address = 127.0.0.1 注释掉 然后保存重启mysql服务&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在已经安装好mysql 的linux服务器上，3360端口默认监听的是127.0.0.1也就是本地地址，要想远程登录mysql服务器，必须更改监听地址…&lt;br&gt;
    
    </summary>
    
      <category term="开发总结" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="服务器" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="linux" scheme="http://yxcoding.github.io/tags/linux/"/>
    
      <category term="mysql" scheme="http://yxcoding.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux Mysql 解决中文乱码的问题</title>
    <link href="http://yxcoding.github.io/2016/06/23/1474977250402/"/>
    <id>http://yxcoding.github.io/2016/06/23/1474977250402/</id>
    <published>2016-06-23T02:27:00.000Z</published>
    <updated>2017-06-02T11:44:30.000Z</updated>
    
    <content type="html">&lt;p&gt;Linux 下Mysql 默认字符集并不是UTF-8,所以只要将mysql的默认字符集修改成UTF-8即可，可以使用命令查看&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;gt;  show variables like &lt;span class=&quot;string&quot;&gt;&#39;character%&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;显示结果如下：&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+--------------------------+----------------------------+ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;| Variable_name |&lt;/span&gt; Value &lt;span class=&quot;params&quot;&gt;| &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+--------------------------+----------------------------+ &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|&lt;/span&gt; character_set_client &lt;span class=&quot;params&quot;&gt;| latin1 |&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;| character_set_connection |&lt;/span&gt; latin1 &lt;span class=&quot;params&quot;&gt;| &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|&lt;/span&gt; character_set_database &lt;span class=&quot;params&quot;&gt;| latin1 |&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;| character_set_filesystem |&lt;/span&gt; binary &lt;span class=&quot;params&quot;&gt;| &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|&lt;/span&gt; character_set_results &lt;span class=&quot;params&quot;&gt;| latin1 |&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;| character_set_server |&lt;/span&gt; latin1 &lt;span class=&quot;params&quot;&gt;| &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|&lt;/span&gt; character_set_system &lt;span class=&quot;params&quot;&gt;| utf8 |&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;| character_sets_dir |&lt;/span&gt; /usr/share/mysql/charsets/ &lt;span class=&quot;params&quot;&gt;| &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+--------------------------+----------------------------+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;进入/etc/mysql/my.cnf 在相应模块下 添加编码设置&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[client]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;default-character-set=utf8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[mysqld]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;character-set-server=utf8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[mysql]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;no-auto-rehash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;修改完成后保存， service mysql restart 重启mysql服务…&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Linux 下Mysql 默认字符集并不是UTF-8,所以只要将mysql的默认字符集修改成UTF-8即可，可以使用命令查看&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;gt;  show variables like &lt;span class=&quot;string&quot;&gt;&#39;character%&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="开发总结" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="服务器" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="linux" scheme="http://yxcoding.github.io/tags/linux/"/>
    
      <category term="mysql" scheme="http://yxcoding.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio 多渠道打包，自定义APK 名称</title>
    <link href="http://yxcoding.github.io/2016/06/23/1474977250403/"/>
    <id>http://yxcoding.github.io/2016/06/23/1474977250403/</id>
    <published>2016-06-23T01:36:00.000Z</published>
    <updated>2017-06-02T11:44:49.000Z</updated>
    
    <content type="html">&lt;p&gt;使用Android Studio 有一段时间了， 让我总结下使用感受，那就是 “爽”！！！&lt;br&gt;由于公司项目android版渠道比较多， 所以打包的时候一般都会使用多渠道打包。而AS 为我们提供了很方便很牛逼的脚本工具Gradle，废话不多说&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://makers-with-myson.blog.so-net.ne.jp/_images/blog/_786/makers-with-myson/m_520android20studio20startup.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;首先在项目底下的 build.gradle 文件中的 android 节点 添加 productFlavors 节点 ， 如下&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//渠道列表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;productFlavors &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pc &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	manifestPlaceholders = [CHANNEL_NAME: &quot;pc&quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  s360&amp;#123;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	manifestPlaceholders = [CHANNEL_NAME: &quot;s360&quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中 CHANNEL_NAME 是 AndroidManifest.xml 中添加 umeng 渠道占位符&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;meta-data &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;android:&lt;/span&gt;name=&lt;span class=&quot;string&quot;&gt;&quot;UMENG_CHANNEL&quot;&lt;/span&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;android:&lt;/span&gt;value=&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;CHANNEL_NAME&amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/meta-data&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同时也在android 节点下 添加 以下脚本&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//PK打包重新命名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;applicationVariants.all &amp;#123; variant -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    variant.outputs.each &amp;#123; output -&amp;gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        def appName = &#39;your app name&#39;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        def buildName&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        variant.productFlavors.each &amp;#123; product -&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            buildName = product.name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        output.outputFile = new File(output.outputFile.parent, appName + &quot;_&quot; + &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        getVersionNameFromManifest() + &quot;_&quot; + buildName + &quot;.apk&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为我们的版本号一般配置在AndroidManifest.xml 中， 所以利用 getVersionFromManifest() 方法获取其中的版本号(versionName)&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//从androidManifest.xml中获取版本号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def getVersionFromManifest() &amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def manifestParser = new com.android.builder.core.DefaultManifestParser()    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;~~~ 好了， 直接 Build-&amp;gt;Generate Signed APK ，然后选择你要打包的渠道和目录&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;使用Android Studio 有一段时间了， 让我总结下使用感受，那就是 “爽”！！！&lt;br&gt;由于公司项目android版渠道比较多， 所以打包的时候一般都会使用多渠道打包。而AS 为我们提供了很方便很牛逼的脚本工具Gradle，废话不多说&lt;br&gt;
    
    </summary>
    
      <category term="开发总结" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
    
      <category term="移动开发" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android" scheme="http://yxcoding.github.io/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/Android/"/>
    
    
      <category term="android studio" scheme="http://yxcoding.github.io/tags/android-studio/"/>
    
  </entry>
  
</feed>
